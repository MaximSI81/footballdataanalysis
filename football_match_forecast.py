import pandas as pd
from clickhouse_driver import Client

def get_match_analysis_from_clickhouse(team1_id, team2_id, team1_name, team2_name, season_id=77142):
    """–°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ —Å REAL xG –¥–∞–Ω–Ω—ã–º–∏, —Ñ–æ—Ä–º–æ–π –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏"""
    
    ch_client = Client(
        host='localhost',
        user='username', 
        password='password',
        database='football_db'
    )
    
    # –û–°–ù–û–í–ù–û–ô –ó–ê–ü–†–û–°
    correct_query = """
    WITH match_totals AS (
        SELECT 
            fps.match_id,
            fps.team_id, 
            SUM(fps.goals) as team_goals,
            SUM(fps.total_shot) as team_shots,
            SUM(fps.on_target_shot) as team_shots_on_target, 
            SUM(fps.fouls) as team_fouls,
            AVG(fps.pass_accuracy) as team_pass_accuracy,
            SUM(fps.total_tackle) as team_tackles,
            COUNT(DISTINCT fps.player_id) as players_count
        FROM football_player_stats fps
        JOIN football_matches fm ON fps.match_id = fm.match_id
        WHERE fps.minutes_played > 0
          AND fps.team_id IN (%(team1)s, %(team2)s)
          AND fm.season_id = %(season_id)s
        GROUP BY fps.match_id, fps.team_id
        HAVING players_count >= 8
    ),
    team_avg AS (
        SELECT 
            team_id,
            AVG(team_goals) as avg_goals_per_match,
            AVG(team_shots) as avg_shots_per_match, 
            AVG(team_shots_on_target) as avg_shots_on_target_per_match,
            AVG(team_fouls) as avg_fouls_per_match,
            AVG(team_pass_accuracy) as avg_pass_accuracy,
            AVG(team_tackles) as avg_tackles_per_match,
            COUNT(*) as matches_analyzed
        FROM match_totals
        GROUP BY team_id
    )
    SELECT 
        t1.team_id as team1_id,
        t2.team_id as team2_id,
        ROUND(t1.avg_goals_per_match, 2) as team1_goals,
        ROUND(t2.avg_goals_per_match, 2) as team2_goals,
        ROUND(t1.avg_shots_per_match, 1) as team1_shots,
        ROUND(t2.avg_shots_per_match, 1) as team2_shots,
        ROUND(t1.avg_shots_on_target_per_match, 1) as team1_shots_on_target,
        ROUND(t2.avg_shots_on_target_per_match, 1) as team2_shots_on_target,
        ROUND(t1.avg_fouls_per_match, 1) as team1_fouls,
        ROUND(t2.avg_fouls_per_match, 1) as team2_fouls,
        ROUND(t1.avg_pass_accuracy, 1) as team1_pass_acc,
        ROUND(t2.avg_pass_accuracy, 1) as team2_pass_acc,
        ROUND(t1.avg_tackles_per_match, 1) as team1_tackles,
        ROUND(t2.avg_tackles_per_match, 1) as team2_tackles,
        t1.matches_analyzed as team1_matches,
        t2.matches_analyzed as team2_matches
    FROM team_avg t1, team_avg t2
    WHERE t1.team_id = %(team1)s AND t2.team_id = %(team2)s
    """
    
    # –ó–ê–ü–†–û–° –§–û–†–ú–´ –ö–û–ú–ê–ù–î
    form_query = """
    SELECT 
        fm.match_id,
        fm.home_team_id,
        fm.away_team_id, 
        fm.home_score,
        fm.away_score,
        fm.match_date,
        CASE 
            WHEN fm.home_team_id = %(team_id)s AND fm.home_score > fm.away_score THEN 'W'
            WHEN fm.away_team_id = %(team_id)s AND fm.away_score > fm.home_score THEN 'W' 
            WHEN fm.home_score = fm.away_score THEN 'D'
            ELSE 'L'
        END as result
    FROM football_matches fm
    WHERE (fm.home_team_id = %(team_id)s OR fm.away_team_id = %(team_id)s)
      AND fm.status = 'Ended'
    ORDER BY fm.match_date DESC
    LIMIT 5
    """
    
    # –ó–ê–ü–†–û–° –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –í–°–¢–†–ï–ß
    h2h_query = """
    SELECT 
        COUNT(*) as total_matches,
        SUM(CASE 
            WHEN fm.home_team_id = %(team1)s AND fm.home_score > fm.away_score THEN 1
            WHEN fm.away_team_id = %(team1)s AND fm.away_score > fm.home_score THEN 1
            ELSE 0 
        END) as team1_wins,
        SUM(CASE 
            WHEN fm.home_team_id = %(team2)s AND fm.home_score > fm.away_score THEN 1
            WHEN fm.away_team_id = %(team2)s AND fm.away_score > fm.home_score THEN 1
            ELSE 0 
        END) as team2_wins,
        SUM(CASE WHEN fm.home_score = fm.away_score THEN 1 ELSE 0 END) as draws,
        AVG(fm.home_score + fm.away_score) as avg_goals
    FROM football_matches fm
    WHERE ((fm.home_team_id = %(team1)s AND fm.away_team_id = %(team2)s)
        OR (fm.home_team_id = %(team2)s AND fm.away_team_id = %(team1)s))
      AND fm.status = 'Ended'
    """
    
   # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° –î–û–ú–ê–®–ù–ò–•/–ì–û–°–¢–ï–í–´–•
    home_away_query = """
    SELECT 
        team_id,
        venue,
        matches,
        ROUND(goals, 2) as goals,
        ROUND(shots, 1) as shots
    FROM (
        -- –î–æ–º–∞—à–Ω–∏–µ –º–∞—Ç—á–∏
        SELECT 
            home_team_id as team_id,
            'home' as venue,
            COUNT(*) as matches,
            AVG(home_score) as goals,
            NULL as shots  -- –∏–ª–∏ –ø–æ–ª—É—á–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        FROM football_matches 
        WHERE home_team_id IN (%(team1)s, %(team2)s)
        AND status = 'Ended'
        GROUP BY home_team_id
        
        UNION ALL
        
        -- –ì–æ—Å—Ç–µ–≤—ã–µ –º–∞—Ç—á–∏  
        SELECT 
            away_team_id as team_id,
            'away' as venue, 
            COUNT(*) as matches,
            AVG(away_score) as goals,
            NULL as shots
        FROM football_matches
        WHERE away_team_id IN (%(team1)s, %(team2)s)
        AND status = 'Ended'
        GROUP BY away_team_id
    )
    ORDER BY team_id, venue
    """
    
    # –ó–ê–ü–†–û–° –ö–ê–†–¢–û–ß–ï–ö
    cards_query = """
    SELECT 
        fps.team_id,
        COUNT(*) as total_cards,
        COUNT(DISTINCT fc.match_id) as matches_with_cards
    FROM football_cards fc
    JOIN football_player_stats fps ON (
        fc.player_id = fps.player_id AND 
        fc.match_id = fps.match_id
    )
    JOIN football_matches fm ON fc.match_id = fm.match_id
    WHERE fps.team_id IN (%(team1)s, %(team2)s)
      AND fm.season_id = %(season_id)s
    GROUP BY fps.team_id
    """
    
    params = {
        'team1': team1_id, 
        'team2': team2_id,
        'season_id': season_id
    }
    
    try:
        print(f"üéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–ê–¢–ß–ê: {team1_name} vs {team2_name}")
        print("=" * 60)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        data = ch_client.execute(correct_query, params)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –∫–æ–º–∞–Ω–¥
        print("üìà –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥...")
        team1_form = ch_client.execute(form_query, {'team_id': team1_id, 'season_id': season_id})
        team2_form = ch_client.execute(form_query, {'team_id': team2_id, 'season_id': season_id})
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        print("ü§ù –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤—Å—Ç—Ä–µ—á...")
        h2h_data = ch_client.execute(h2h_query, params)
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ/–≥–æ—Å—Ç–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("üè† –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∞—à–Ω–∏—Ö/–≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...")
        home_away_stats = ch_client.execute(home_away_query, params)
        
        # 5. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        print("üÉè –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫...")
        cards_data = ch_client.execute(cards_query, params)
        
        if not data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–µ–∑–æ–Ω–∞")
            return
        
        row = data[0]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        team1_cards = 0
        team2_cards = 0
        team1_matches_with_cards = 1
        team2_matches_with_cards = 1
        
        for card_row in cards_data:
            if card_row[0] == team1_id:
                team1_cards = card_row[1]
                team1_matches_with_cards = max(card_row[2], 1)
            elif card_row[0] == team2_id:
                team2_cards = card_row[1]
                team2_matches_with_cards = max(card_row[2], 1)
        
        # –†–ê–°–ß–ï–¢–´ –î–õ–Ø –ü–†–û–ì–ù–û–ó–û–í
        team1_avg_cards = team1_cards / team1_matches_with_cards
        team2_avg_cards = team2_cards / team2_matches_with_cards
        total_cards = team1_avg_cards + team2_avg_cards
        total_goals = row[2] + row[3]
        
        # –î–ê–ù–ù–´–ï –ò–ó –°–¢–ê–¢–ò–°–¢–ò–ö–ò
        team1_xg = 1.27
        team2_xg = 0.67
        team1_corners = 9
        team2_corners = 1
        total_xg = team1_xg + team2_xg
        
        print(f"\nüè† {team1_name} (–¥–æ–º–∞) vs üõ¨ {team2_name} (–≤ –≥–æ—Å—Ç—è—Ö)")
        print("=" * 50)
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ï –ò–ù–î–ï–ö–°–´
        team1_matches_count = row[14]
        team2_matches_count = row[15]
        
        print(f"\n‚öΩ –†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {team1_matches_count} –º–∞—Ç—á–µ–π):")
        print(f"   {team1_name}: {row[2]} –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á")
        print(f"   {team2_name}: {row[3]} –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á")

        print(f"\nüéØ –£–î–ê–†–´:")
        print(f"   {team1_name}: {row[4]} —É–¥–∞—Ä–æ–≤ ({row[6]} –≤ —Å—Ç–≤–æ—Ä) –∑–∞ –º–∞—Ç—á") 
        print(f"   {team2_name}: {row[5]} —É–¥–∞—Ä–æ–≤ ({row[7]} –≤ —Å—Ç–≤–æ—Ä) –∑–∞ –º–∞—Ç—á")

        print(f"\nüü® –î–ò–°–¶–ò–ü–õ–ò–ù–ê:")
        print(f"   {team1_name}: {row[8]} —Ñ–æ–ª–æ–≤, {team1_avg_cards:.1f} –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –º–∞—Ç—á")
        print(f"   {team2_name}: {row[9]} —Ñ–æ–ª–æ–≤, {team2_avg_cards:.1f} –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –º–∞—Ç—á")

        print(f"\nüìä –¢–û–ß–ù–û–°–¢–¨ –ü–ï–†–ï–î–ê–ß:")
        print(f"   {team1_name}: {row[10]}%")
        print(f"   {team2_name}: {row[11]}%")
        
        print(f"\nüõ°Ô∏è –û–ë–û–†–û–ù–ê:")
        print(f"   {team1_name}: {row[12]} –æ—Ç–±–æ—Ä–æ–≤ –∑–∞ –º–∞—Ç—á")
        print(f"   {team2_name}: {row[13]} –æ—Ç–±–æ—Ä–æ–≤ –∑–∞ –º–∞—Ç—á")
        
        # –†–ï–ê–õ–¨–ù–´–ô xG –ê–ù–ê–õ–ò–ó
        print(f"\nüìà –†–ï–ê–õ–¨–ù–´–ô xG –ê–ù–ê–õ–ò–ó (–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞):")
        print(f"   {team1_name}: {team1_xg} xG")
        print(f"   {team2_name}: {team2_xg} xG")
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
        team1_efficiency = row[2] - team1_xg
        team2_efficiency = row[3] - team2_xg
        
        print(f"\nüéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:")
        print(f"   {team1_name}: {row[2]:.1f} –≥–æ–ª–æ–≤ –ø—Ä–∏ {team1_xg:.1f} xG ({team1_efficiency:+.2f})")
        print(f"   {team2_name}: {row[3]:.1f} –≥–æ–ª–æ–≤ –ø—Ä–∏ {team2_xg:.1f} xG ({team2_efficiency:+.2f})")
        
        # –ê–ù–ê–õ–ò–ó –£–ì–õ–û–í–´–•
        print(f"\nüé™ –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø:")
        print(f"   {team1_name}: {team1_corners} —É–≥–ª–æ–≤—ã—Ö –∑–∞ –º–∞—Ç—á")
        print(f"   {team2_name}: {team2_corners} —É–≥–ª–æ–≤—ã—Ö –∑–∞ –º–∞—Ç—á")
        
        # –§–û–†–ú–ê –ö–û–ú–ê–ù–î
        print(f"\nüìà –§–û–†–ú–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π):")
        if team1_form:
            team1_form_results = [match[6] for match in team1_form]
            print(f"   {team1_name}: {''.join(['üü¢' if r == 'W' else 'üü°' if r == 'D' else 'üî¥' for r in team1_form_results])}")
        else:
            print(f"   {team1_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
        if team2_form:
            team2_form_results = [match[6] for match in team2_form]
            print(f"   {team2_name}: {''.join(['üü¢' if r == 'W' else 'üü°' if r == 'D' else 'üî¥' for r in team2_form_results])}")
        else:
            print(f"   {team2_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # H2H –í–°–¢–†–ï–ß–ò
        if h2h_data and h2h_data[0][0] > 0:
            h2h_info = h2h_data[0]
            print(f"\nü§ù –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –í–°–¢–†–ï–ß–ò ({h2h_info[0]} –º–∞—Ç—á–µ–π):")
            print(f"   {team1_name}: {h2h_info[1]} –ø–æ–±–µ–¥")
            print(f"   {team2_name}: {h2h_info[2]} –ø–æ–±–µ–¥")
            print(f"   –ù–∏—á—å–∏—Ö: {h2h_info[3]}")
            print(f"   –°—Ä–µ–¥–Ω–∏–µ –≥–æ–ª—ã: {h2h_info[4]:.1f}")
        else:
            print(f"\nü§ù –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –í–°–¢–†–ï–ß–ò: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –î–û–ú–ê–®–ù–ò–ï/–ì–û–°–¢–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
        if home_away_stats:
            team1_home = next((s for s in home_away_stats if s[0] == team1_id and s[1] == 'home'), None)
            team2_away = next((s for s in home_away_stats if s[0] == team2_id and s[1] == 'away'), None)
            
            if team1_home and team2_away:
                print(f"\nüè† –î–û–ú–ê–®–ù–ò–ï/–ì–û–°–¢–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
                print(f"   {team1_name} –¥–æ–º–∞: {team1_home[3]}‚öΩ {team1_home[4]}üéØ")
                print(f"   {team2_name} –≤ –≥–æ—Å—Ç—è—Ö: {team2_away[3]}‚öΩ {team2_away[4]}üéØ")
        
        # –ü–†–û–ì–ù–û–ó –ü–û –¢–û–¢–ê–õ–ê–ú –ù–ê –û–°–ù–û–í–ï xG
        if total_xg > 2.8:
            total_pred = "–¢–ë 2.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            total_market = "–¢–ë 2.5"
            confidence = "üî¥ –í—ã—Å–æ–∫–∞—è"
        elif total_xg > 2.2:
            total_pred = "–¢–ë 2.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            total_market = "–¢–ë 2.5"
            confidence = "üü° –°—Ä–µ–¥–Ω—è—è"
        elif total_xg > 1.8:
            total_pred = "–¢–ú 2.5 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            total_market = "–¢–ú 2.5"
            confidence = "üü¢ –ù–∏–∑–∫–∞—è"
        else:
            total_pred = "–¢–ú 2.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            total_market = "–¢–ú 2.5"
            confidence = "üî¥ –í—ã—Å–æ–∫–∞—è"
            
        # –ü–†–û–ì–ù–û–ó –ü–û –ö–ê–†–¢–û–ß–ö–ê–ú
        if total_cards > 5.5:
            cards_pred = "–¢–ë 5.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            cards_market = "–¢–ë 5.5"
        elif total_cards > 4.5:
            cards_pred = "–¢–ë 4.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            cards_market = "–¢–ë 4.5"
        elif total_cards > 3.5:
            cards_pred = "–¢–ú 4.5 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            cards_market = "–¢–ú 4.5"
        else:
            cards_pred = "–¢–ú 3.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            cards_market = "–¢–ú 3.5"
            
        # –ü–†–û–ì–ù–û–ó –ü–û –£–ì–õ–û–í–´–ú
        total_corners = team1_corners + team2_corners
        if total_corners > 10.5:
            corners_pred = "–¢–ë 10.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            corners_market = "–¢–ë 10.5"
        elif total_corners > 9.5:
            corners_pred = "–¢–ë 9.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            corners_market = "–¢–ë 9.5"
        elif total_corners > 8.5:
            corners_pred = "–¢–ú 9.5 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            corners_market = "–¢–ú 9.5"
        else:
            corners_pred = "–¢–ú 8.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
            corners_market = "–¢–ú 8.5"
            
        print(f"\nüèÜ –ü–†–û–ì–ù–û–ó –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:")
        print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã (xG): {total_xg:.1f}")
        print(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –≥–æ–ª—ã (–∏—Å—Ç–æ—Ä–∏—è): {total_goals:.1f}")
        print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {total_cards:.1f}")
        print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ —É–≥–ª–æ–≤—ã–µ: {total_corners:.1f}")
        
        print(f"\nüí∞ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–¢–ê–í–ö–ê–ú:")
        print(f"   ‚Ä¢ –¢–æ—Ç–∞–ª—ã –≥–æ–ª–æ–≤: {total_pred}")
        print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
        print(f"   ‚Ä¢ –¢–æ—Ç–∞–ª—ã –∫–∞—Ä—Ç–æ—á–µ–∫: {cards_pred}")
        print(f"   ‚Ä¢ –¢–æ—Ç–∞–ª—ã —É–≥–ª–æ–≤—ã—Ö: {corners_pred}")
        
        print(f"\nüéØ –†–´–ù–ö–ò –î–õ–Ø –°–¢–ê–í–û–ö:")
        print(f"   ‚Ä¢ –ì–æ–ª—ã: {total_market}")
        print(f"   ‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏: {cards_market}")
        print(f"   ‚Ä¢ –£–≥–ª–æ–≤—ã–µ: {corners_market}")
        
        # –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´
        print(f"\nüìà –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´ –ò–ó –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
        goal_diff = row[2] - row[3]
        foul_diff = row[8] - row[9]
        pass_acc_diff = row[10] - row[11]
        cards_diff = team1_avg_cards - team2_avg_cards
        xg_diff = team1_xg - team2_xg
        corners_diff = team1_corners - team2_corners

        insights = []
        
        if abs(xg_diff) > 0.3:
            if xg_diff > 0:
                insights.append(f"{team1_name} —Å–æ–∑–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –æ–ø–∞—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ (+{xg_diff:.2f} xG)")
            else:
                insights.append(f"{team2_name} —Å–æ–∑–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –æ–ø–∞—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ (+{abs(xg_diff):.2f} xG)")
        
        if team1_efficiency > 0.3:
            insights.append(f"{team1_name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (+{team1_efficiency:.2f})")
        elif team1_efficiency < -0.3:
            insights.append(f"{team1_name} –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π ({team1_efficiency:.2f})")
            
        if team2_efficiency > 0.3:
            insights.append(f"{team2_name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (+{team2_efficiency:.2f})")
        elif team2_efficiency < -0.3:
            insights.append(f"{team2_name} –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π ({team2_efficiency:.2f})")
        
        if corners_diff > 3:
            insights.append(f"{team1_name} –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏—è—Ö (+{corners_diff} —É–≥–ª–æ–≤—ã—Ö)")
        elif corners_diff < -3:
            insights.append(f"{team2_name} –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏—è—Ö (+{abs(corners_diff)} —É–≥–ª–æ–≤—ã—Ö)")
        
        if abs(goal_diff) > 0.3:
            if goal_diff > 0:
                insights.append(f"{team1_name} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤ –∞—Ç–∞–∫–µ (+{goal_diff:.1f} –≥–æ–ª–∞)")
            else:
                insights.append(f"{team2_name} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤ –∞—Ç–∞–∫–µ (+{abs(goal_diff):.1f} –≥–æ–ª–∞)")
        
        if abs(pass_acc_diff) > 3:
            if pass_acc_diff > 0:
                insights.append(f"{team1_name} –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∏–≥—Ä—É (–ø–∞—Å +{pass_acc_diff:.1f}%)")
            else:
                insights.append(f"{team2_name} –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∏–≥—Ä—É (–ø–∞—Å +{abs(pass_acc_diff):.1f}%)")
        
        if abs(foul_diff) > 2:
            if foul_diff > 0:
                insights.append(f"{team1_name} –∏–≥—Ä–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ (+{foul_diff:.1f} —Ñ–æ–ª–∞)")
            else:
                insights.append(f"{team2_name} –∏–≥—Ä–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ (+{abs(foul_diff):.1f} —Ñ–æ–ª–∞)")
        
        if not insights:
            insights = [
                "–û–±–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–≥—Ä—É",
                "–ë–æ—Ä—å–±–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª—è –±—É–¥–µ—Ç –∫–ª—é—á–µ–≤–æ–π",
                "–û–∂–∏–¥–∞–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫—É—é –±–∏—Ç–≤—É"
            ]
        
        for i, insight in enumerate(insights[:5], 1):
            print(f"   {i}. {insight}")
            
        print(f"\nüìñ –ú–ï–¢–†–ò–ö–ò –ê–ù–ê–õ–ò–ó–ê:")
        print(f"   ‚Ä¢ xG (Expected Goals) - –æ–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–º–µ–Ω—Ç–æ–≤")
        print(f"   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –†–µ–∞–ª—å–Ω—ã–µ –≥–æ–ª—ã - xG")
        print(f"   ‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è")
        print(f"   ‚Ä¢ –£–≥–ª–æ–≤—ã–µ = –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞—Ç–∞–∫—É—é—â–µ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        import traceback
        print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if __name__ == "__main__":
    get_match_analysis_from_clickhouse(
        team1_id=2322,
        team2_id=24118,
        team1_name="–ö—Ä—ã–ª—å—è —Å–æ–≤–µ—Ç–æ–≤",
        team2_name="–û—Ä–µ–Ω–±—É—Ä–≥", 
        season_id=77142
    )