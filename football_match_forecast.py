import pandas as pd
from clickhouse_driver import Client
import os
import asyncio
from typing import Dict, Any, List, Tuple
from datetime import datetime, timedelta

class AdvancedFootballAnalyzer:
    def __init__(self):
        self.ch_client = None

    async def __aenter__(self):
        self.ch_client = Client(
            host='localhost',
            user='username', 
            password='password',
            database='football_db'
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.ch_client:
            self.ch_client.disconnect()

    def get_team_stats_from_db(self, team_id: int, tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã"""
        try:
            query = """
            SELECT 
                matches_played, goals_scored, goals_conceded, avg_possession,
                avg_shots, avg_shots_on_target, avg_xg, avg_corners,
                avg_fouls, avg_yellow_cards, big_chances, big_chances_missed,
                goals_inside_box, goals_outside_box, headed_goals, pass_accuracy, fast_breaks
            FROM team_stats_cache 
            WHERE team_id = %(team_id)s 
            AND tournament_id = %(tournament_id)s 
            AND season_id = %(season_id)s
            ORDER BY updated_at DESC 
            LIMIT 1
            """
            
            result = self.ch_client.execute(query, {
                'team_id': team_id,
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            if result:
                stats = {
                    'matches': result[0][0],
                    'goalsScored': result[0][1],
                    'goalsConceded': result[0][2],
                    'averageBallPossession': result[0][3],
                    'shots': result[0][4],
                    'shotsOnTarget': result[0][5],
                    'expectedGoals': result[0][6],
                    'corners': result[0][7],
                    'fouls': result[0][8],
                    'yellowCards': result[0][9],
                    'bigChances': result[0][10],
                    'bigChancesMissed': result[0][11],
                    'goalsFromInsideTheBox': result[0][12],
                    'goalsFromOutsideTheBox': result[0][13],
                    'headedGoals': result[0][14],
                    'accuratePassesPercentage': result[0][15],
                    'fastBreaks': result[0][16]
                }
                return stats
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã {team_id} –∏–∑ –ë–î: {e}")
            return {}

    def get_team_position_from_db(self, team_id: int, tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏ –¥–∏–Ω–∞–º–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã"""
        try:
            query = """
            SELECT 
                position, points, goal_difference, matches_played,
                wins, draws, losses, goals_for, goals_against,
                form, trend, last_updated_round
            FROM team_positions_cache 
            WHERE team_id = %(team_id)s 
            AND tournament_id = %(tournament_id)s 
            AND season_id = %(season_id)s
            ORDER BY updated_at DESC 
            LIMIT 1
            """
            
            result = self.ch_client.execute(query, {
                'team_id': team_id,
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            if result:
                return {
                    'position': result[0][0],
                    'points': result[0][1],
                    'goal_difference': result[0][2],
                    'matches_played': result[0][3],
                    'wins': result[0][4],
                    'draws': result[0][5],
                    'losses': result[0][6],
                    'goals_for': result[0][7],
                    'goals_against': result[0][8],
                    'form': result[0][9],
                    'trend': result[0][10],
                    'last_updated_round': result[0][11]
                }
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return {}

    def get_current_standings(self, tournament_id: int, season_id: int) -> Dict[int, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã"""
        try:
            query = """
            SELECT team_id, position
            FROM team_positions_cache 
            WHERE tournament_id = %(tournament_id)s 
            AND season_id = %(season_id)s
            AND updated_at >= NOW() - INTERVAL 1 DAY
            ORDER BY position
            """
            
            results = self.ch_client.execute(query, {
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            standings = {}
            for team_id, position in results:
                standings[team_id] = position
                
            return standings
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î: {e}")
            return {}

    def get_team_xg_from_db(self, team1_id: int, team2_id: int, season_id: int) -> Tuple[float, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç xG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            query = """
            SELECT 
                team_id,
                AVG(expected_goals) as avg_xg
            FROM football_match_stats
            WHERE team_id IN (%(team1)s, %(team2)s)
            AND match_id IN (
                SELECT match_id FROM football_matches 
                WHERE season_id = %(season_id)s 
                AND status = 'Ended'
            )
            GROUP BY team_id
            """
            
            results = self.ch_client.execute(query, {
                'team1': team1_id, 
                'team2': team2_id, 
                'season_id': season_id
            })
            
            team1_xg = 0.0
            team2_xg = 0.0
            
            for team_id, avg_xg in results:
                if team_id == team1_id:
                    team1_xg = avg_xg or 0.0
                elif team_id == team2_id:
                    team2_xg = avg_xg or 0.0
                    
            return team1_xg, team2_xg
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è xG –∏–∑ –ë–î: {e}")
            return 0.0, 0.0
        
    async def get_players_analysis(self, team1_id: int, team2_id: int, team1_name: str, team2_name: str, 
                              tournament_id: int, season_id: int):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        
        print(f"‚≠ê –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –ö–õ–Æ–ß–ï–í–´–• –ò–ì–†–û–ö–û–í:")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–∞—Ö
            team1_key_players = self.get_key_players_progress(team1_id, season_id)
            team2_key_players = self.get_key_players_progress(team2_id, season_id)

            print(f"\nüîë {team1_name} - –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏:")
            if team1_key_players:
                for player in team1_key_players[:3]:
                    trend_icon = "üìà" if player['trend'] == 'up' else "üìâ" if player['trend'] == 'down' else "‚û°Ô∏è"
                    print(f"   ‚Ä¢ {player['name']} ({player['position']}) {trend_icon}")
                    print(f"     –ì–æ–ª—ã: {player['goals']} | –ê—Å—Å–∏—Å—Ç—ã: {player['assists']} | –£–¥–∞—Ä—ã: {player['shots']}")
            else:
                print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤")

            print(f"\nüîë {team2_name} - –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏:")
            if team2_key_players:
                for player in team2_key_players[:3]:
                    trend_icon = "üìà" if player['trend'] == 'up' else "üìâ" if player['trend'] == 'down' else "‚û°Ô∏è"
                    print(f"   ‚Ä¢ {player['name']} ({player['position']}) {trend_icon}")
                    print(f"     –ì–æ–ª—ã: {player['goals']} | –ê—Å—Å–∏—Å—Ç—ã: {player['assists']} | –£–¥–∞—Ä—ã: {player['shots']}")
            else:
                print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")
            import traceback
            traceback.print_exc()

    def safe_divide(self, numerator, denominator, default=0.0):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω—É–ª–µ–π"""
        if denominator and denominator > 0:
            return numerator / denominator
        return default

    def analyze_position_trend(self, position_data: Dict) -> Tuple[str, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
        if not position_data:
            return "N/A", ""
            
        current_position = position_data.get('position', 0)
        trend = position_data.get('trend', 'stable')
        
        trend_icons = {
            'up': 'üü¢ —É–ª—É—á—à–µ–Ω–∏–µ',
            'down': 'üî¥ —É—Ö—É–¥—à–µ–Ω–∏–µ', 
            'stable': 'üü° —Å—Ç–∞–±–∏–ª—å–Ω–æ'
        }
        
        return str(current_position), trend_icons.get(trend, 'üü° —Å—Ç–∞–±–∏–ª—å–Ω–æ')

    async def get_match_analysis(self, team1_id: int, team2_id: int, team1_name: str, team2_name: str, 
                               tournament_id: int = 203, season_id: int = 77142):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
        
        print(f"üéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–ê–¢–ß–ê: {team1_name} vs {team2_name}")
        print("=" * 60)
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ –∫—ç—à–∞
            standings = self.get_current_standings(tournament_id, season_id)
            
            team1_position = standings.get(team1_id, "N/A")
            team2_position = standings.get(team2_id, "N/A")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã
            team1_stats = self.get_team_stats_from_db(team1_id, tournament_id, season_id)
            team2_stats = self.get_team_stats_from_db(team2_id, tournament_id, season_id)
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–∏–Ω–∞–º–∏–∫–µ
            team1_position_data = self.get_team_position_from_db(team1_id, tournament_id, season_id)
            team2_position_data = self.get_team_position_from_db(team2_id, tournament_id, season_id)
            
            team1_pos_trend = self.analyze_position_trend(team1_position_data)
            team2_pos_trend = self.analyze_position_trend(team2_position_data)

            # 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            team1_form = self.get_team_form_from_db(team1_id, season_id)
            team2_form = self.get_team_form_from_db(team2_id, season_id)
 

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
            team1_matches = team1_stats.get('matches', 1)
            team2_matches = team2_stats.get('matches', 1)

            # –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –º–∞—Ç—á
            team1_goals_pm = self.safe_divide(team1_stats.get('goalsScored', 0), team1_matches)
            team2_goals_pm = self.safe_divide(team2_stats.get('goalsScored', 0), team2_matches)
            
            team1_shots_pm = self.safe_divide(team1_stats.get('shots', 0), team1_matches)
            team2_shots_pm = self.safe_divide(team2_stats.get('shots', 0), team2_matches)
            
            team1_shots_on_target_pm = self.safe_divide(team1_stats.get('shotsOnTarget', 0), team1_matches)
            team2_shots_on_target_pm = self.safe_divide(team2_stats.get('shotsOnTarget', 0), team2_matches)
            
            # 5. –ü–æ–ª—É—á–∞–µ–º xG –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            team1_xg, team2_xg = self.get_team_xg_from_db(team1_id, team2_id, season_id)

            # –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
            print(f"\nüè† {team1_name} (–¥–æ–º–∞) vs üõ¨ {team2_name} (–≤ –≥–æ—Å—Ç—è—Ö)")
            print("=" * 50)

            # –ü–û–ó–ò–¶–ò–Ø –í –¢–ê–ë–õ–ò–¶–ï
            print(f"\nüèÜ –ü–û–ó–ò–¶–ò–Ø –í –¢–ê–ë–õ–ò–¶–ï:")
            print(f"   {team1_name}: {team1_position} –º–µ—Å—Ç–æ {team1_pos_trend[1]}")
            print(f"   {team2_name}: {team2_position} –º–µ—Å—Ç–æ {team2_pos_trend[1]}")

            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –∫–ª–∞—Å—Å–µ
            if team1_position != "N/A" and team2_position != "N/A":
                position_diff = abs(int(team1_position) - int(team2_position))
                if position_diff <= 3:
                    class_analysis = "–†–∞–≤–Ω—ã–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∏"
                elif position_diff <= 6:
                    class_analysis = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ" 
                else:
                    class_analysis = "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ"
                print(f"   –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–ª–∞—Å—Å–µ: {position_diff} –ø–æ–∑–∏—Ü–∏–π ({class_analysis})")
            else:
                position_diff = 0
                class_analysis = "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
     

            # –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
            print(f"\n‚öΩ –†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨ (–Ω–∞ –æ—Å–Ω–æ–≤–µ {team1_matches} –º–∞—Ç—á–µ–π):")
            print(f"   {team1_name}: {team1_goals_pm:.1f} –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á")
            print(f"   {team2_name}: {team2_goals_pm:.1f} –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á")

            print(f"\nüéØ –£–î–ê–†–´:")
            print(f"   {team1_name}: {team1_shots_pm:.1f} —É–¥–∞—Ä–æ–≤ ({team1_shots_on_target_pm:.1f} –≤ —Å—Ç–≤–æ—Ä) –∑–∞ –º–∞—Ç—á")
            print(f"   {team2_name}: {team2_shots_pm:.1f} —É–¥–∞—Ä–æ–≤ ({team2_shots_on_target_pm:.1f} –≤ —Å—Ç–≤–æ—Ä) –∑–∞ –º–∞—Ç—á")

            # xG –ê–ù–ê–õ–ò–ó
            print(f"\nüìà –†–ï–ê–õ–¨–ù–´–ô xG –ê–ù–ê–õ–ò–ó:")
            print(f"   {team1_name}: {team1_xg:.2f} xG")
            print(f"   {team2_name}: {team2_xg:.2f} xG")

            # –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
            team1_efficiency = team1_goals_pm - team1_xg
            team2_efficiency = team2_goals_pm - team2_xg

            print(f"\nüéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:")
            print(f"   {team1_name}: {team1_goals_pm:.1f} –≥–æ–ª–æ–≤ –ø—Ä–∏ {team1_xg:.1f} xG ({team1_efficiency:+.2f})")
            print(f"   {team2_name}: {team2_goals_pm:.1f} –≥–æ–ª–æ–≤ –ø—Ä–∏ {team2_xg:.1f} xG ({team2_efficiency:+.2f})")

            # –ö–û–ù–¢–†–û–õ–¨ –ò–ì–†–´
            team1_possession = team1_stats.get('averageBallPossession', 0)
            team2_possession = team2_stats.get('averageBallPossession', 0)
            
            print(f"\nüìä –ö–û–ù–¢–†–û–õ–¨ –ò–ì–†–´:")
            print(f"   {team1_name}: {team1_possession:.1f}% –≤–ª–∞–¥–µ–Ω–∏—è")
            print(f"   {team2_name}: {team2_possession:.1f}% –≤–ª–∞–¥–µ–Ω–∏—è")

            # –ü–ï–†–ï–î–ê–ß–ò
            team1_pass_accuracy = team1_stats.get('accuratePassesPercentage', 0)
            team2_pass_accuracy = team2_stats.get('accuratePassesPercentage', 0)

            print(f"\nüîÑ –¢–û–ß–ù–û–°–¢–¨ –ü–ï–†–ï–î–ê–ß:")
            print(f"   {team1_name}: {team1_pass_accuracy:.1f}%")
            print(f"   {team2_name}: {team2_pass_accuracy:.1f}%")

            # –û–ë–û–†–û–ù–ê
            team1_goals_conceded_pm = self.safe_divide(team1_stats.get('goalsConceded', 0), team1_matches)
            team2_goals_conceded_pm = self.safe_divide(team2_stats.get('goalsConceded', 0), team2_matches)

            print(f"\nüõ°Ô∏è –û–ë–û–†–û–ù–ê:")
            print(f"   {team1_name}: {team1_goals_conceded_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞ –º–∞—Ç—á")
            print(f"   {team2_name}: {team2_goals_conceded_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞ –º–∞—Ç—á")

            # –ö–ê–ß–ï–°–¢–í–û –ú–û–ú–ï–ù–¢–û–í
            team1_big_chances_pm = self.safe_divide(team1_stats.get('bigChances', 0), team1_matches)
            team2_big_chances_pm = self.safe_divide(team2_stats.get('bigChances', 0), team2_matches)
            team1_big_chances_missed_pm = self.safe_divide(team1_stats.get('bigChancesMissed', 0), team1_matches)
            team2_big_chances_missed_pm = self.safe_divide(team2_stats.get('bigChancesMissed', 0), team2_matches)

            print(f"\nüé™ –ö–ê–ß–ï–°–¢–í–û –ú–û–ú–ï–ù–¢–û–í:")
            print(f"   {team1_name}: {team1_big_chances_pm:.1f} –±–æ–ª—å—à–∏—Ö —à–∞–Ω—Å–æ–≤ ({team1_big_chances_missed_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            print(f"   {team2_name}: {team2_big_chances_pm:.1f} –±–æ–ª—å—à–∏—Ö —à–∞–Ω—Å–æ–≤ ({team2_big_chances_missed_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–æ)")

           # –ê–ù–ê–õ–ò–ó –ó–û–ù –ê–¢–ê–ö
            print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ó–û–ù –ê–¢–ê–ö –ò –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô:")

            team1_total_goals = team1_stats.get('goalsScored', 1)
            team2_total_goals = team2_stats.get('goalsScored', 1)

            print(f"\nüèπ {team1_name} –ê–¢–ê–ö–£–ï–¢:")
            # –†–ê–°–ß–ï–¢ –ü–†–û–¶–ï–ù–¢–û–í –° –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ï–ô
            team1_inside = self.safe_divide(team1_stats.get('goalsFromInsideTheBox', 0), team1_total_goals) * 100
            team1_outside = self.safe_divide(team1_stats.get('goalsFromOutsideTheBox', 0), team1_total_goals) * 100  
            team1_headed = self.safe_divide(team1_stats.get('headedGoals', 0), team1_total_goals) * 100

            # –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–û–¶–ï–ù–¢–û–í
            total_percent = team1_inside + team1_outside + team1_headed
            if total_percent > 100:
                team1_inside = (team1_inside / total_percent) * 100
                team1_outside = (team1_outside / total_percent) * 100
                team1_headed = (team1_headed / total_percent) * 100

            print(f"   ‚Ä¢ {team1_inside:.0f}% –≥–æ–ª–æ–≤ –∏–∑–Ω—É—Ç—Ä–∏ —à—Ç—Ä–∞—Ñ–Ω–æ–π")
            print(f"   ‚Ä¢ {team1_outside:.0f}% –≥–æ–ª–æ–≤ –∏–∑–¥–∞–ª–∏")
            print(f"   ‚Ä¢ {team1_headed:.0f}% –≥–æ–ª–æ–≤ –≥–æ–ª–æ–≤–æ–π")

            print(f"\nüèπ {team2_name} –ê–¢–ê–ö–£–ï–¢:")
            # –¢–ê–ö–ñ–ï –î–õ–Ø –í–¢–û–†–û–ô –ö–û–ú–ê–ù–î–´
            team2_inside = self.safe_divide(team2_stats.get('goalsFromInsideTheBox', 0), team2_total_goals) * 100
            team2_outside = self.safe_divide(team2_stats.get('goalsFromOutsideTheBox', 0), team2_total_goals) * 100  
            team2_headed = self.safe_divide(team2_stats.get('headedGoals', 0), team2_total_goals) * 100

            # –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–û–¶–ï–ù–¢–û–í
            total_percent = team2_inside + team2_outside + team2_headed
            if total_percent > 100:
                team2_inside = (team2_inside / total_percent) * 100
                team2_outside = (team2_outside / total_percent) * 100
                team2_headed = (team2_headed / total_percent) * 100

            print(f"   ‚Ä¢ {team2_inside:.0f}% –≥–æ–ª–æ–≤ –∏–∑–Ω—É—Ç—Ä–∏ —à—Ç—Ä–∞—Ñ–Ω–æ–π")
            print(f"   ‚Ä¢ {team2_outside:.0f}% –≥–æ–ª–æ–≤ –∏–∑–¥–∞–ª–∏")
            print(f"   ‚Ä¢ {team2_headed:.0f}% –≥–æ–ª–æ–≤ –≥–æ–ª–æ–≤–æ–π")

            # –î–ê–ù–ù–´–ï –ò–ó –ë–î
            matches_count = len(team1_form) if team1_form else 0

            if matches_count == 0:
                print(f"\nüìà –§–û–†–ú–ê (–ø–µ—Ä–≤—ã–π —Ç—É—Ä - –º–∞—Ç—á–µ–π –Ω–µ—Ç)")
            else:
                form_text = "–º–∞—Ç—á" if matches_count == 1 else f"–ø–æ—Å–ª–µ–¥–Ω–∏–µ {matches_count} –º–∞—Ç—á–∞" if matches_count < 5 else "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π"
                print(f"\nüìà –§–û–†–ú–ê (–∑–∞ {form_text}):")

            if team1_form:
                team1_form_results = [match[6] for match in team1_form]
                team1_form_display = team1_form_results[::-1]  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –±—ã–ª —Å–ø—Ä–∞–≤–∞
                form_icons = ''.join(['üü¢' if r == 'W' else 'üü°' if r == 'D' else 'üî¥' for r in team1_form_display])
                print(f"   {team1_name}: {form_icons}")
                if matches_count > 0:
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {', '.join([r for r in team1_form_display])}")
            else:
                print(f"   {team1_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
            if team2_form:
                team2_form_results = [match[6] for match in team2_form]
                team2_form_display = team2_form_results[::-1]
                form_icons = ''.join(['üü¢' if r == 'W' else 'üü°' if r == 'D' else 'üî¥' for r in team2_form_display])
                print(f"   {team2_name}: {form_icons}")
                if matches_count > 0:
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {', '.join([r for r in team2_form_display])}")
            else:
                print(f"   {team2_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            # –ò–°–¢–û–†–ò–Ø –õ–ò–ß–ù–´–• –í–°–¢–†–ï–ß
            print(f"\nüìä –ò–°–¢–û–†–ò–Ø –õ–ò–ß–ù–´–• –í–°–¢–†–ï–ß ({team1_name} vs {team2_name}):")
            h2h_all_time = self.get_team_all_time_stats(team1_id, team2_id)

            if h2h_all_time:
                print(f"\nü§ù –í–°–ï–ì–û –ú–ê–¢–ß–ï–ô: {h2h_all_time['total_matches']}")

                if h2h_all_time['total_matches'] > 0:
                    print(f"   ‚Ä¢ {team1_name}: {h2h_all_time['team1_wins']} –ø–æ–±–µ–¥ ({h2h_all_time['team1_win_rate']:.1f}%)")
                    print(f"   ‚Ä¢ {team2_name}: {h2h_all_time['team2_wins']} –ø–æ–±–µ–¥ ({h2h_all_time['team2_win_rate']:.1f}%)")
                    print(f"   ‚Ä¢ –ù–∏—á—å–∏—Ö: {h2h_all_time['draws']} ({h2h_all_time['draws']/h2h_all_time['total_matches']*100:.1f}%)")
                else:
                    print(f"   ‚Ä¢ {team1_name}: {h2h_all_time['team1_wins']} –ø–æ–±–µ–¥ (0%)")
                    print(f"   ‚Ä¢ {team2_name}: {h2h_all_time['team2_wins']} –ø–æ–±–µ–¥ (0%)")
                    print(f"   ‚Ä¢ –ù–∏—á—å–∏—Ö: {h2h_all_time['draws']} (0%)")
                    print("   ü§ù –ö–æ–º–∞–Ω–¥—ã —Ä–∞–Ω–µ–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å")
                
                print(f"\n‚öΩ –û–ë–©–ê–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨:")
                print(f"   ‚Ä¢ {team1_name}: {h2h_all_time['team1_goals']} –≥–æ–ª–æ–≤")
                print(f"   ‚Ä¢ {team2_name}: {h2h_all_time['team2_goals']} –≥–æ–ª–æ–≤")
                print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: +{h2h_all_time['team1_goals'] - h2h_all_time['team2_goals']}")
                
                print(f"\nüìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ó–ê –ú–ê–¢–ß:")
                print(f"   ‚Ä¢ {team1_name}: {h2h_all_time['team1_avg_goals']:.1f} –≥–æ–ª–æ–≤")
                print(f"   ‚Ä¢ {team2_name}: {h2h_all_time['team2_avg_goals']:.1f} –≥–æ–ª–æ–≤")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á: {h2h_all_time['team1_avg_goals'] + h2h_all_time['team2_avg_goals']:.1f}")

            # –ö–õ–Æ–ß–ï–í–´–ï –ò–ì–†–û–ö–ò
            print(f"\n‚≠ê –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –ö–õ–Æ–ß–ï–í–´–• –ò–ì–†–û–ö–û–í:")
            team1_key_players = self.get_key_players_progress(team1_id, season_id)
            team2_key_players = self.get_key_players_progress(team2_id, season_id)

            print(f"\nüîë {team1_name} - –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏:")
            if team1_key_players:
                for player in team1_key_players[:3]:
                    trend_icon = "üìà" if player['trend'] == 'up' else "üìâ" if player['trend'] == 'down' else "‚û°Ô∏è"
                    print(f"   ‚Ä¢ {player['name']} ({player['position']}) {trend_icon}")
                    print(f"     –ì–æ–ª—ã: {player['goals']} | –ê—Å—Å–∏—Å—Ç—ã: {player['assists']} | –£–¥–∞—Ä—ã: {player['shots']}")
            else:
                print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤")

            print(f"\nüîë {team2_name} - –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏:")
            if team2_key_players:
                for player in team2_key_players[:3]:
                    trend_icon = "üìà" if player['trend'] == 'up' else "üìâ" if player['trend'] == 'down' else "‚û°Ô∏è"
                    print(f"   ‚Ä¢ {player['name']} ({player['position']}) {trend_icon}")
                    print(f"     –ì–æ–ª—ã: {player['goals']} | –ê—Å—Å–∏—Å—Ç—ã: {player['assists']} | –£–¥–∞—Ä—ã: {player['shots']}")
            else:
                print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤")

            # –ü–†–û–ì–ù–û–ó–´
            total_goals = team1_goals_pm + team2_goals_pm
            
            print(f"\nüèÜ –ü–†–û–ì–ù–û–ó –° –£–ß–ï–¢–û–ú –ü–û–ó–ò–¶–ò–ò –í –¢–ê–ë–õ–ò–¶–ï:")
            print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã: {total_goals:.1f}")
            
            if position_diff > 0:
                print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–ª–∞—Å—Å–µ: {position_diff} –ø–æ–∑–∏—Ü–∏–π")

            # –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ü–†–û–ì–ù–û–ó–´
            if team1_position != "N/A" and team2_position != "N/A":
                if total_goals > 2.8 and position_diff <= 4:
                    total_pred = "–¢–ë 2.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üî¥ –í—ã—Å–æ–∫–∞—è"
                elif total_goals > 2.2 and position_diff <= 6:
                    total_pred = "–¢–ë 2.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üü° –°—Ä–µ–¥–Ω—è—è"
                elif total_goals > 1.8:
                    total_pred = "–¢–ú 2.5 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)" 
                    confidence = "üü¢ –ù–∏–∑–∫–∞—è"
                else:
                    total_pred = "–¢–ú 2.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üî¥ –í—ã—Å–æ–∫–∞—è"
            else:
                if total_goals > 2.8:
                    total_pred = "–¢–ë 2.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üü° –°—Ä–µ–¥–Ω—è—è"
                elif total_goals > 2.2:
                    total_pred = "–¢–ë 2.5 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üü¢ –ù–∏–∑–∫–∞—è"
                else:
                    total_pred = "–¢–ú 2.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üü° –°—Ä–µ–¥–Ω—è—è"

            print(f"\nüí∞ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"   ‚Ä¢ –¢–æ—Ç–∞–ª—ã –≥–æ–ª–æ–≤: {total_pred}")
            print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
            if position_diff > 0:
                print(f"   ‚Ä¢ –§–∞–∫—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏: {class_analysis}")

            # –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´
            print(f"\nüìà –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:")
            insights = self.generate_insights(
                team1_name, team2_name, team1_stats, team2_stats, 
                team1_position, team2_position, team1_matches, team2_matches,
                team1_xg, team2_xg
            )
            
            for i, insight in enumerate(insights, 1):
                print(f"   {i}. {insight}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def get_team_form_from_db(self, team_id: int, season_id: int) -> List:
        try:
            query = """
            SELECT 
                fm.match_id, fm.home_team_id, fm.away_team_id, 
                fm.home_score, fm.away_score, fm.match_date,
                CASE 
                    WHEN fm.home_team_id = %(team_id)s AND fm.home_score > fm.away_score THEN 'W'
                    WHEN fm.away_team_id = %(team_id)s AND fm.away_score > fm.home_score THEN 'W' 
                    WHEN fm.home_score = fm.away_score THEN 'D'
                    ELSE 'L'
                END as result
            FROM football_matches fm
            WHERE (fm.home_team_id = %(team_id)s OR fm.away_team_id = %(team_id)s)
            AND fm.status = 'Ended'
            AND fm.season_id = %(season_id)s
            ORDER BY fm.match_date DESC
            LIMIT 5
            """
            return self.ch_client.execute(query, {'team_id': team_id, 'season_id': season_id})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return []

    def get_h2h_from_db(self, team1_id: int, team2_id: int) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ –ë–î"""
        try:
            query = """
            SELECT 
                COUNT(*) as total_matches,
                SUM(CASE 
                    WHEN fm.home_team_id = %(team1)s AND fm.home_score > fm.away_score THEN 1
                    WHEN fm.away_team_id = %(team1)s AND fm.away_score > fm.home_score THEN 1
                    ELSE 0 
                END) as team1_wins,
                SUM(CASE 
                    WHEN fm.home_team_id = %(team2)s AND fm.home_score > fm.away_score THEN 1
                    WHEN fm.away_team_id = %(team2)s AND fm.away_score > fm.home_score THEN 1
                    ELSE 0 
                END) as team2_wins,
                SUM(CASE WHEN fm.home_score = fm.away_score THEN 1 ELSE 0 END) as draws,
                AVG(fm.home_score + fm.away_score) as avg_goals
            FROM football_matches fm
            WHERE ((fm.home_team_id = %(team1)s AND fm.away_team_id = %(team2)s)
                OR (fm.home_team_id = %(team2)s AND fm.away_team_id = %(team1)s))
              AND fm.status = 'Ended'
            """
            return self.ch_client.execute(query, {'team1': team1_id, 'team2': team2_id})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è H2H: {e}")
            return []

    def get_home_away_stats_from_db(self, team1_id: int, team2_id: int) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ/–≥–æ—Å—Ç–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–∑ –ë–î"""
        try:
            query = """
            SELECT 
                team_id, venue, matches, goals, conceded
            FROM (
                SELECT home_team_id as team_id, 'home' as venue, COUNT(*) as matches,
                       AVG(home_score) as goals, AVG(away_score) as conceded
                FROM football_matches WHERE home_team_id = %(team1)s AND status = 'Ended' GROUP BY home_team_id
                UNION ALL
                SELECT away_team_id as team_id, 'away' as venue, COUNT(*) as matches,
                       AVG(away_score) as goals, AVG(home_score) as conceded  
                FROM football_matches WHERE away_team_id = %(team1)s AND status = 'Ended' GROUP BY away_team_id
                UNION ALL
                SELECT home_team_id as team_id, 'home' as venue, COUNT(*) as matches,
                       AVG(home_score) as goals, AVG(away_score) as conceded
                FROM football_matches WHERE home_team_id = %(team2)s AND status = 'Ended' GROUP BY home_team_id
                UNION ALL
                SELECT away_team_id as team_id, 'away' as venue, COUNT(*) as matches,
                       AVG(away_score) as goals, AVG(home_score) as conceded
                FROM football_matches WHERE away_team_id = %(team2)s AND status = 'Ended' GROUP BY away_team_id
            )
            ORDER BY team_id, venue
            """
            return self.ch_client.execute(query, {'team1': team1_id, 'team2': team2_id})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö/–≥–æ—Å—Ç–µ–≤—ã—Ö stats: {e}")
            return []

    def get_team_all_time_stats(self, team1_id: int, team2_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –≤ –º–∞—Ç—á–∞—Ö –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        try:
            query = """
            SELECT 
                COUNT(*) as total_matches,
                SUM(CASE 
                    WHEN (home_team_id = %(team1)s AND home_score > away_score) 
                    OR (away_team_id = %(team1)s AND away_score > home_score) THEN 1 
                    ELSE 0 
                END) as team1_wins,
                SUM(CASE 
                    WHEN (home_team_id = %(team2)s AND home_score > away_score) 
                    OR (away_team_id = %(team2)s AND away_score > home_score) THEN 1 
                    ELSE 0 
                END) as team2_wins,
                SUM(CASE WHEN home_score = away_score THEN 1 ELSE 0 END) as draws,
                SUM(CASE WHEN home_team_id = %(team1)s THEN home_score ELSE away_score END) as team1_goals,
                SUM(CASE WHEN home_team_id = %(team2)s THEN home_score ELSE away_score END) as team2_goals,
                AVG(CASE WHEN home_team_id = %(team1)s THEN home_score ELSE away_score END) as team1_avg_goals,
                AVG(CASE WHEN home_team_id = %(team2)s THEN home_score ELSE away_score END) as team2_avg_goals
            FROM football_matches 
            WHERE ((home_team_id = %(team1)s AND away_team_id = %(team2)s)
                OR (home_team_id = %(team2)s AND away_team_id = %(team1)s))
            AND status = 'Ended'
            """
            
            results = self.ch_client.execute(query, {'team1': team1_id, 'team2': team2_id})
            if results:
                total_matches, team1_wins, team2_wins, draws, team1_goals, team2_goals, team1_avg_goals, team2_avg_goals = results[0]
                
                return {
                    'total_matches': total_matches or 0,
                    'team1_wins': team1_wins or 0,
                    'team2_wins': team2_wins or 0,
                    'draws': draws or 0,
                    'team1_goals': team1_goals or 0,
                    'team2_goals': team2_goals or 0,
                    'team1_avg_goals': team1_avg_goals or 0,
                    'team2_avg_goals': team2_avg_goals or 0,
                    'team1_win_rate': (team1_wins / total_matches * 100) if total_matches > 0 else 0,
                    'team2_win_rate': (team2_wins / total_matches * 100) if total_matches > 0 else 0
                }
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å—Ç—Ä–µ—á: {e}")
            return {}

    def get_key_players_progress(self, team_id: int, season_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∏–≥—Ä–æ–∫–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            query = """
            WITH player_totals AS (
                SELECT 
                    player_id,
                    player_name,
                    position,
                    COUNT(*) as matches_played,
                    SUM(goals) as total_goals,
                    SUM(goal_assist) as total_assists,
                    SUM(total_shot) as total_shots,
                    SUM(key_pass) as total_key_passes,
                    AVG(rating) as avg_rating
                FROM football_player_stats fps
                JOIN football_matches fm ON fps.match_id = fm.match_id
                WHERE fps.team_id = %(team_id)s 
                AND fm.season_id = %(season_id)s
                AND fps.minutes_played > 45
                GROUP BY player_id, player_name, position
                HAVING COUNT(*) >= 3
            ),
            player_recent AS (
                SELECT 
                    player_id,
                    AVG(rating) as recent_rating,
                    SUM(goals) as recent_goals,
                    SUM(goal_assist) as recent_assists
                FROM football_player_stats fps
                JOIN football_matches fm ON fps.match_id = fm.match_id
                WHERE fps.team_id = %(team_id)s 
                AND fm.season_id = %(season_id)s
                AND fps.minutes_played > 45
                AND fm.match_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)
                GROUP BY player_id
            )
            SELECT 
                pt.player_id,
                pt.player_name,
                pt.position,
                pt.matches_played,
                pt.total_goals,
                pt.total_assists,
                pt.total_shots,
                pt.avg_rating,
                COALESCE(pr.recent_rating, 0) as recent_rating,
                COALESCE(pr.recent_goals, 0) as recent_goals,
                COALESCE(pr.recent_assists, 0) as recent_assists
            FROM player_totals pt
            LEFT JOIN player_recent pr ON pt.player_id = pr.player_id
            WHERE pt.total_goals + pt.total_assists > 0
            OR pt.avg_rating > 7.0
            ORDER BY (pt.total_goals + pt.total_assists) DESC, pt.avg_rating DESC
            LIMIT 5
            """
            
            results = self.ch_client.execute(query, {'team_id': team_id, 'season_id': season_id})
            key_players = []
            
            for row in results:
                player_id, name, position, matches, goals, assists, shots, avg_rating, recent_rating, recent_goals, recent_assists = row
                
                if recent_rating > avg_rating + 0.3:
                    trend = 'up'
                elif recent_rating < avg_rating - 0.3:
                    trend = 'down' 
                else:
                    trend = 'stable'
                
                key_players.append({
                    'id': player_id,
                    'name': name,
                    'position': position,
                    'matches': matches,
                    'goals': goals,
                    'assists': assists,
                    'shots': shots,
                    'avg_rating': avg_rating,
                    'recent_rating': recent_rating,
                    'trend': trend
                })
            
            return key_players
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {e}")
            return []

    def generate_insights(self, team1_name: str, team2_name: str, team1_stats: Dict, team2_stats: Dict,
                     team1_pos: str, team2_pos: str, team1_matches: int, team2_matches: int,
                     team1_xg: float = 0.0, team2_xg: float = 0.0) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
        insights = []
        
        team1_goals_pm = self.safe_divide(team1_stats.get('goalsScored', 0), team1_matches)
        team2_goals_pm = self.safe_divide(team2_stats.get('goalsScored', 0), team2_matches)
        team1_efficiency = team1_goals_pm - team1_xg
        team2_efficiency = team2_goals_pm - team2_xg
        
        if abs(team1_efficiency) > 0.3:
            if team1_efficiency > 0:
                insights.append(f"{team1_name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (+{team1_efficiency:.2f} xG)")
            else:
                insights.append(f"{team1_name} –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π ({team1_efficiency:.2f} xG)")
                
        if abs(team2_efficiency) > 0.3:
            if team2_efficiency > 0:
                insights.append(f"{team2_name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (+{team2_efficiency:.2f} xG)")
            else:
                insights.append(f"{team2_name} –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π ({team2_efficiency:.2f} xG)")
        
        if team1_pos != "N/A" and team2_pos != "N/A":
            pos1 = int(team1_pos)
            pos2 = int(team2_pos)
            pos_diff = abs(pos1 - pos2)
            
            if pos_diff >= 5:
                if pos1 < pos2:
                    insights.append(f"{team1_name} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –≤ —Ç–∞–±–ª–∏—Ü–µ (-{pos_diff} –ø–æ–∑–∏—Ü–∏–π)")
                else:
                    insights.append(f"{team2_name} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –≤ —Ç–∞–±–ª–∏—Ü–µ (-{pos_diff} –ø–æ–∑–∏—Ü–∏–π)")

        possession_diff = abs(team1_stats.get('averageBallPossession', 0) - team2_stats.get('averageBallPossession', 0))
        if possession_diff > 10:
            if team1_stats.get('averageBallPossession', 0) > team2_stats.get('averageBallPossession', 0):
                insights.append(f"{team1_name} –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –º—è—á–∞ (+{possession_diff:.1f}%)")
            else:
                insights.append(f"{team2_name} –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –º—è—á–∞ (+{possession_diff:.1f}%)")

        team1_defense_pm = self.safe_divide(team1_stats.get('goalsConceded', 0), team1_matches)
        team2_defense_pm = self.safe_divide(team2_stats.get('goalsConceded', 0), team2_matches)
        
        if team1_defense_pm < team2_defense_pm - 0.3:
            insights.append(f"{team1_name} –Ω–∞–¥–µ–∂–Ω–µ–µ –≤ –æ–±–æ—Ä–æ–Ω–µ ({team1_defense_pm:.1f} vs {team2_defense_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö)")
        elif team2_defense_pm < team1_defense_pm - 0.3:
            insights.append(f"{team2_name} –Ω–∞–¥–µ–∂–Ω–µ–µ –≤ –æ–±–æ—Ä–æ–Ω–µ ({team2_defense_pm:.1f} vs {team1_defense_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö)")

        return insights[:5] or ["–û–±–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–≥—Ä—É"]
