import pandas as pd
from clickhouse_driver import Client
import os
import asyncio
from typing import Dict, Any, List, Tuple
from datetime import datetime, timedelta

class AdvancedFootballAnalyzer:
    def __init__(self):
        self.ch_client = None

    async def __aenter__(self):
        self.ch_client = Client(
            host='localhost',
            user='username', 
            password='password',
            database='football_db'
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.ch_client:
            self.ch_client.disconnect()

    # –°–ª–æ–≤–∞—Ä—å –¥–µ—Ä–±–∏
    DERBY_PAIRS = {
        # üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞
        (2315, 2323): "–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –¥–µ—Ä–±–∏: –î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞-–°–ø–∞—Ä—Ç–∞–∫ –ú–æ—Å–∫–≤–∞",
        (2320, 2323): "–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –¥–µ—Ä–±–∏: –õ–æ–∫–æ–º–æ—Ç–∏–≤ –ú–æ—Å–∫–≤–∞-–°–ø–∞—Ä—Ç–∞–∫ –ú–æ—Å–∫–≤–∞", 
        (2325, 2323): "–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –¥–µ—Ä–±–∏: –¶–°–ö–ê –ú–æ—Å–∫–≤–∞-–°–ø–∞—Ä—Ç–∞–∫ –ú–æ—Å–∫–≤–∞",
        (2315, 2320): "–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –¥–µ—Ä–±–∏: –î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞-–õ–æ–∫–æ–º–æ—Ç–∏–≤ –ú–æ—Å–∫–≤–∞",
        (2315, 2325): "–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –¥–µ—Ä–±–∏: –î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞-–¶–°–ö–ê –ú–æ—Å–∫–≤–∞",
        (2320, 2325): "–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –¥–µ—Ä–±–∏: –õ–æ–∫–æ–º–æ—Ç–∏–≤ –ú–æ—Å–∫–≤–∞-–¶–°–ö–ê –ú–æ—Å–∫–≤–∞",
        (2321, 2323): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–µ–Ω–∏—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥-–°–ø–∞—Ä—Ç–∞–∫ –ú–æ—Å–∫–≤–∞",
        (2321, 2325): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–µ–Ω–∏—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥-–¶–°–ö–ê –ú–æ—Å–∫–≤–∞",
        (2321, 2315): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ó–µ–Ω–∏—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥-–î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞",
        (34425, 2326): "–Æ–∂–Ω–æ–µ –¥–µ—Ä–±–∏: –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä-–†–æ—Å—Ç–æ–≤",
        (34425, 2321): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä-–ó–µ–Ω–∏—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        (2326, 2321): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –†–æ—Å—Ç–æ–≤-–ó–µ–Ω–∏—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        
        # üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞
        (44, 35): "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ –¥–µ—Ä–±–∏: –õ–∏–≤–µ—Ä–ø—É–ª—å-–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥",
        (42, 35): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ê—Ä—Å–µ–Ω–∞–ª-–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥",
        (42, 44): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ê—Ä—Å–µ–Ω–∞–ª-–õ–∏–≤–µ—Ä–ø—É–ª—å",
        (38, 42): "–õ–æ–Ω–¥–æ–Ω—Å–∫–æ–µ –¥–µ—Ä–±–∏: –ß–µ–ª—Å–∏-–ê—Ä—Å–µ–Ω–∞–ª",
        (38, 37): "–õ–æ–Ω–¥–æ–Ω—Å–∫–æ–µ –¥–µ—Ä–±–∏: –ß–µ–ª—Å–∏-–í–µ—Å—Ç –•—ç–º –Æ–Ω–∞–π—Ç–µ–¥",
        (42, 37): "–õ–æ–Ω–¥–æ–Ω—Å–∫–æ–µ –¥–µ—Ä–±–∏: –ê—Ä—Å–µ–Ω–∞–ª-–í–µ—Å—Ç –•—ç–º –Æ–Ω–∞–π—Ç–µ–¥",
        (35, 17): "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä—Å–∫–æ–µ –¥–µ—Ä–±–∏: –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥-–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏",
        (33, 38): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –¢–æ—Ç—Ç–µ–Ω—Ö—ç–º –•–æ—Ç—Å–ø—É—Ä-–ß–µ–ª—Å–∏",
        (33, 42): "–°–µ–≤–µ—Ä–æ-–õ–æ–Ω–¥–æ–Ω—Å–∫–æ–µ –¥–µ—Ä–±–∏: –¢–æ—Ç—Ç–µ–Ω—Ö—ç–º –•–æ—Ç—Å–ø—É—Ä-–ê—Ä—Å–µ–Ω–∞–ª",
        
        # üá©üá™ –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞
        (2672, 2673): "–î–µ—Ä–±–∏ –ì–µ—Ä–º–∞–Ω–∏–∏: –ë–∞–≤–∞—Ä–∏—è –ú—é–Ω—Ö–µ–Ω-–ë–æ—Ä—É—Å—Å–∏—è –î–æ—Ä—Ç–º—É–Ω–¥",
        (2672, 2681): "–Æ–∂–Ω–æ–µ –¥–µ—Ä–±–∏: –ë–∞–≤–∞—Ä–∏—è –ú—é–Ω—Ö–µ–Ω-–ë–∞–π–µ—Ä –õ–µ–≤–µ—Ä–∫—É–∑–µ–Ω",
        (2673, 2681): "–†–µ–π–Ω—Å–∫–æ–µ –¥–µ—Ä–±–∏: –ë–æ—Ä—É—Å—Å–∏—è –î–æ—Ä—Ç–º—É–Ω–¥-–ë–∞–π–µ—Ä –õ–µ–≤–µ—Ä–∫—É–∑–µ–Ω",
        (2674, 2672): "–Æ–∂–Ω–æ–µ –¥–µ—Ä–±–∏: –ê–π–Ω—Ç—Ä–∞—Ö—Ç –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç-–ë–∞–≤–∞—Ä–∏—è –ú—é–Ω—Ö–µ–Ω",
        (2527, 2673): "–†–µ–π–Ω—Å–∫–æ–µ –¥–µ—Ä–±–∏: –ë–æ—Ä—É—Å—Å–∏—è –ú—ë–Ω—Ö–µ–Ω–≥–ª–∞–¥–±–∞—Ö-–ë–æ—Ä—É—Å—Å–∏—è –î–æ—Ä—Ç–º—É–Ω–¥",
        
        # üá´üá∑ –õ–∏–≥–∞ 1
        (1644, 1641): "Le Classique: –ü–∞—Ä–∏ –°–µ–Ω-–ñ–µ—Ä–º–µ–Ω-–ú–∞—Ä—Å–µ–ª—å",
        (1644, 1649): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ü–∞—Ä–∏ –°–µ–Ω-–ñ–µ—Ä–º–µ–Ω-–õ–∏–æ–Ω",
        (1641, 1649): "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–µ –¥–µ—Ä–±–∏: –ú–∞—Ä—Å–µ–ª—å-–õ–∏–æ–Ω",
        (1644, 1653): "–ë–æ–≥–∞—Ç–æ–µ –¥–µ—Ä–±–∏: –ü–∞—Ä–∏ –°–µ–Ω-–ñ–µ—Ä–º–µ–Ω-–ú–æ–Ω–∞–∫–æ",
        (1641, 1653): "–ü—Ä–∏–±—Ä–µ–∂–Ω–æ–µ –¥–µ—Ä–±–∏: –ú–∞—Ä—Å–µ–ª—å-–ú–æ–Ω–∞–∫–æ",
        
        # üáÆüáπ –°–µ—Ä–∏—è –ê
        (2697, 2692): "–î–µ—Ä–±–∏ –ò—Ç–∞–ª–∏–∏: –ò–Ω—Ç–µ—Ä-–ú–∏–ª–∞–Ω",
        (2702, 2692): "–°—Ç–æ–ª–∏—á–Ω–æ–µ –¥–µ—Ä–±–∏: –†–æ–º–∞-–ú–∏–ª–∞–Ω",
        (2702, 2697): "–ú–∏–ª–∞–Ω—Å–∫–æ–µ –¥–µ—Ä–±–∏: –†–æ–º–∞-–ò–Ω—Ç–µ—Ä",
        (2714, 2692): "–Æ–∂–Ω–æ–µ –¥–µ—Ä–±–∏: –ù–∞–ø–æ–ª–∏-–ú–∏–ª–∞–Ω",
        (2714, 2697): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ù–∞–ø–æ–ª–∏-–ò–Ω—Ç–µ—Ä",
        (2687, 2692): "–¢—É—Ä–∏–Ω—Å–∫–æ–µ –¥–µ—Ä–±–∏: –Æ–≤–µ–Ω—Ç—É—Å-–ú–∏–ª–∞–Ω",
        (2687, 2697): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –Æ–≤–µ–Ω—Ç—É—Å-–ò–Ω—Ç–µ—Ä",
        (2699, 2702): "–†–∏–º—Å–∫–æ–µ –¥–µ—Ä–±–∏: –õ–∞—Ü–∏–æ-–†–æ–º–∞",
        
        # üá™üá∏ –õ–∞ –õ–∏–≥–∞
        (2817, 2829): "–≠–ª—å –ö–ª–∞—Å–∏–∫–æ: –ë–∞—Ä—Å–µ–ª–æ–Ω–∞-–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥",
        (2836, 2829): "–ú–∞–¥—Ä–∏–¥—Å–∫–æ–µ –¥–µ—Ä–±–∏: –ê—Ç–ª–µ—Ç–∏–∫–æ –ú–∞–¥—Ä–∏–¥-–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥",
        (2836, 2817): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –ê—Ç–ª–µ—Ç–∏–∫–æ –ú–∞–¥—Ä–∏–¥-–ë–∞—Ä—Å–µ–ª–æ–Ω–∞",
        (2828, 2817): "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–µ –¥–µ—Ä–±–∏: –í–∞–ª–µ–Ω—Å–∏—è-–ë–∞—Ä—Å–µ–ª–æ–Ω–∞",
        (2828, 2829): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –í–∞–ª–µ–Ω—Å–∏—è-–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥",
        (2819, 2817): "–ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ: –í–∏–ª—å—è—Ä—Ä–µ–∞–ª-–ë–∞—Ä—Å–µ–ª–æ–Ω–∞"
    }

    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def get_team_stats_from_db(self, team_id: int, tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã"""
        try:
            query = """
            SELECT 
                matches_played, goals_scored, goals_conceded, avg_possession,
                avg_shots, avg_shots_on_target, avg_corners,
                avg_fouls, avg_yellow_cards, big_chances, big_chances_missed,
                goals_inside_box, goals_outside_box, headed_goals, pass_accuracy, fast_breaks
            FROM team_stats_cache 
            WHERE team_id = %(team_id)s 
            AND tournament_id = %(tournament_id)s 
            AND season_id = %(season_id)s
            ORDER BY updated_at DESC 
            LIMIT 1
            """
            
            result = self.ch_client.execute(query, {
                'team_id': team_id,
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            if result:
                stats = {
                    'matches': result[0][0],
                    'goalsScored': result[0][1],
                    'goalsConceded': result[0][2],
                    'averageBallPossession': result[0][3],
                    'shots': result[0][4],
                    'shotsOnTarget': result[0][5],
                    'corners': result[0][6],
                    'fouls': result[0][7],
                    'yellowCards': result[0][8],
                    'bigChances': result[0][9],
                    'bigChancesMissed': result[0][10],
                    'goalsFromInsideTheBox': result[0][11],
                    'goalsFromOutsideTheBox': result[0][12],
                    'headedGoals': result[0][13],
                    'accuratePassesPercentage': result[0][14],
                    'fastBreaks': result[0][15]
                }
                return stats
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã {team_id} –∏–∑ –ë–î: {e}")
            return {}

    def get_team_position_from_db(self, team_id: int, tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏ –¥–∏–Ω–∞–º–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã"""
        try:
            query = """
            SELECT 
                position, points, goal_difference, matches_played,
                wins, draws, losses, goals_for, goals_against,
                form, trend, last_updated_round
            FROM team_positions_cache 
            WHERE team_id = %(team_id)s 
            AND tournament_id = %(tournament_id)s 
            AND season_id = %(season_id)s
            ORDER BY updated_at DESC 
            LIMIT 1
            """
            
            result = self.ch_client.execute(query, {
                'team_id': team_id,
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            if result:
                return {
                    'position': result[0][0],
                    'points': result[0][1],
                    'goal_difference': result[0][2],
                    'matches_played': result[0][3],
                    'wins': result[0][4],
                    'draws': result[0][5],
                    'losses': result[0][6],
                    'goals_for': result[0][7],
                    'goals_against': result[0][8],
                    'form': result[0][9],
                    'trend': result[0][10],
                    'last_updated_round': result[0][11]
                }
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return {}

    def get_current_standings(self, tournament_id: int, season_id: int) -> Dict[int, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã"""
        try:
            query = """
            SELECT team_id, position
            FROM team_positions_cache 
            WHERE tournament_id = %(tournament_id)s 
            AND season_id = %(season_id)s
            ORDER BY position
            """
            
            results = self.ch_client.execute(query, {
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            standings = {}
            for team_id, position in results:
                standings[team_id] = position
                
            return standings
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î: {e}")
            return {}

    def get_team_xg_from_db(self, team1_id: int, team2_id: int, season_id: int) -> Tuple[float, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç xG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ –∏–∑ football_match_stats"""
        try:
            query = """
            SELECT 
                team_id,
                AVG(expected_goals) as avg_xg
            FROM football_match_stats
            WHERE team_id IN (%(team1)s, %(team2)s)
            AND match_id IN (
                SELECT match_id FROM football_matches 
                WHERE season_id = %(season_id)s 
                AND status = 'Ended'
            )
            AND expected_goals IS NOT NULL
            AND expected_goals > 0
            GROUP BY team_id
            """
            
            results = self.ch_client.execute(query, {
                'team1': team1_id, 
                'team2': team2_id, 
                'season_id': season_id
            })
            
            team1_xg = 0.0
            team2_xg = 0.0
            
            for team_id, avg_xg in results:
                if team_id == team1_id:
                    team1_xg = avg_xg or 0.0
                elif team_id == team2_id:
                    team2_xg = avg_xg or 0.0
                    
            return team1_xg, team2_xg
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è xG –∏–∑ –ë–î: {e}")
            return 0.0, 0.0

    def safe_divide(self, numerator, denominator, default=0.0):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω—É–ª–µ–π"""
        if denominator and denominator > 0:
            return numerator / denominator
        return default

    def analyze_position_trend(self, position_data: Dict) -> Tuple[str, str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
        if not position_data:
            return "N/A", ""
            
        current_position = position_data.get('position', 0)
        trend = position_data.get('trend', 'stable')
        
        trend_icons = {
            'up': 'üü¢ —É–ª—É—á—à–µ–Ω–∏–µ',
            'down': 'üî¥ —É—Ö—É–¥—à–µ–Ω–∏–µ', 
            'stable': 'üü° —Å—Ç–∞–±–∏–ª—å–Ω–æ'
        }
        
        return str(current_position), trend_icons.get(trend, 'üü° —Å—Ç–∞–±–∏–ª—å–Ω–æ')

    def get_team_crosses_longballs_from_db(self, team1_id: int, team2_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–æ—Å—Å–∞—Ö –∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á–∞—Ö"""
        try:
            query = """
            SELECT 
                team_id,
                AVG(total_crosses) as avg_total_crosses,
                AVG(accurate_crosses) as avg_accurate_crosses,
                AVG(total_long_balls) as avg_total_long_balls,
                AVG(accurate_long_balls) as avg_accurate_long_balls
            FROM football_match_stats 
            WHERE team_id IN (%(team1)s, %(team2)s)
            AND match_id IN (
                SELECT match_id FROM football_matches 
                WHERE season_id = %(season_id)s AND status = 'Ended'
            )
            GROUP BY team_id
            """
            
            results = self.ch_client.execute(query, {
                'team1': team1_id,
                'team2': team2_id, 
                'season_id': season_id
            })
            
            stats = {}
            for team_id, avg_crosses, avg_accurate_crosses, avg_long_balls, avg_accurate_long_balls in results:
                stats[team_id] = {
                    'total_crosses': avg_crosses or 0,
                    'accurate_crosses': avg_accurate_crosses or 0,
                    'total_long_balls': avg_long_balls or 0,
                    'accurate_long_balls': avg_accurate_long_balls or 0
                }
            
            return stats
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–æ—Å—Å–æ–≤ –∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á: {e}")
            return {}



    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê –ñ–ï–õ–¢–´–• –ö–ê–†–¢–û–ß–ï–ö
    def _get_team_yellow_stats(self, team_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            query = """
            WITH team_matches AS (
                SELECT match_id, home_team_id as team_id FROM football_matches 
                WHERE home_team_id = %(team_id)s AND season_id = %(season_id)s AND status = 'Ended'
                UNION ALL
                SELECT match_id, away_team_id as team_id FROM football_matches 
                WHERE away_team_id = %(team_id)s AND season_id = %(season_id)s AND status = 'Ended'
            )
            SELECT 
                COUNT(DISTINCT fc.match_id) as matches_count,
                COUNT(fc.card_type) as total_yellows,
                COUNT(fc.card_type) * 1.0 / COUNT(DISTINCT fc.match_id) as avg_yellows_per_match
            FROM football_cards fc
            JOIN team_matches tm ON fc.match_id = tm.match_id
            WHERE fc.card_type = 'yellow'
            """
            
            result = self.ch_client.execute(query, {
                'team_id': team_id,
                'season_id': season_id
            })
            
            if result and result[0][0] > 0:
                matches_count, total_yellows, avg_yellows = result[0]
                return {
                    'matches_count': matches_count,
                    'total_yellows': total_yellows,
                    'avg_yellows': round(avg_yellows, 2)
                }
            return {'matches_count': 0, 'total_yellows': 0, 'avg_yellows': 2.0}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return {'matches_count': 0, 'total_yellows': 0, 'avg_yellows': 2.0}

    def _get_team_home_away_yellow_stats(self, team_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ/–≥–æ—Å—Ç–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
        try:
            query = """
            SELECT 
                CASE 
                    WHEN fm.home_team_id = %(team_id)s THEN 'home'
                    ELSE 'away'
                END as venue,
                COUNT(DISTINCT fc.match_id) as matches_count,
                COUNT(fc.card_type) as total_yellows,
                COUNT(fc.card_type) * 1.0 / COUNT(DISTINCT fc.match_id) as avg_yellows
            FROM football_cards fc
            JOIN football_matches fm ON fc.match_id = fm.match_id
            WHERE fc.card_type = 'yellow'
                AND (fm.home_team_id = %(team_id)s OR fm.away_team_id = %(team_id)s)
                AND fm.season_id = %(season_id)s
                AND fm.status = 'Ended'
            GROUP BY venue
            """
            
            results = self.ch_client.execute(query, {
                'team_id': team_id,
                'season_id': season_id
            })
            
            stats = {'home': {'avg_yellows': 2.0}, 'away': {'avg_yellows': 2.0}}
            
            for venue, matches_count, total_yellows, avg_yellows in results:
                if venue == 'home':
                    stats['home'] = {
                        'matches_count': matches_count,
                        'total_yellows': total_yellows,
                        'avg_yellows': round(avg_yellows, 2)
                    }
                elif venue == 'away':
                    stats['away'] = {
                        'matches_count': matches_count,
                        'total_yellows': total_yellows,
                        'avg_yellows': round(avg_yellows, 2)
                    }
            
            return stats
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö/–≥–æ—Å—Ç–µ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return {'home': {'avg_yellows': 2.0}, 'away': {'avg_yellows': 2.0}}

    def _get_referee_yellow_stats(self, referee_id: int, tournament_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ—Ñ–µ—Ä–∏"""
        try:
            query = """
            SELECT 
                referee_name,
                referee_yellow_cards,
                referee_games,
                referee_yellow_cards * 1.0 / NULLIF(referee_games, 0) as avg_yellows
            FROM match_fixtures 
            WHERE referee_id = %(referee_id)s
                AND tournament_id = %(tournament_id)s
                AND referee_games > 0
            ORDER BY start_timestamp DESC
            LIMIT 1
            """
            
            result = self.ch_client.execute(query, {
                'referee_id': referee_id,
                'tournament_id': tournament_id
            })
            
            if result:
                name, total_yellows, games, avg_yellows = result[0]
                return {
                    'name': name,
                    'total_yellows': total_yellows,
                    'games': games,
                    'avg_yellows': round(avg_yellows, 2)
                }
            return {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'total_yellows': 0, 'games': 0, 'avg_yellows': 3.0}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∏ {referee_id}: {e}")
            return {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'total_yellows': 0, 'games': 0, 'avg_yellows': 3.0}

    def _get_h2h_yellow_stats(self, team1_id: int, team2_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö"""
        try:
            query = """
            SELECT 
                COUNT(DISTINCT fm.match_id) as matches_count,
                COUNT(fc.card_type) as total_yellows,
                COUNT(fc.card_type) * 1.0 / COUNT(DISTINCT fm.match_id) as avg_yellows
            FROM football_matches fm
            JOIN football_cards fc ON fm.match_id = fc.match_id
            WHERE ((fm.home_team_id = %(team1)s AND fm.away_team_id = %(team2)s)
                OR (fm.home_team_id = %(team2)s AND fm.away_team_id = %(team1)s))
                AND fm.status = 'Ended'
                AND fc.card_type = 'yellow'
            """
            
            result = self.ch_client.execute(query, {
                'team1': team1_id,
                'team2': team2_id
            })
            
            if result and result[0][0] > 0:
                matches_count, total_yellows, avg_yellows = result[0]
                return {
                    'matches_count': matches_count,
                    'total_yellows': total_yellows,
                    'avg_yellows': round(avg_yellows, 2)
                }
            return {'matches_count': 0, 'total_yellows': 0, 'avg_yellows': 3.0}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è H2H —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return {'matches_count': 0, 'total_yellows': 0, 'avg_yellows': 3.0}

    def _get_team_fouls_stats(self, team_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            query = """
            SELECT 
                AVG(fouls) as avg_fouls
            FROM football_match_stats 
            WHERE team_id = %(team_id)s
                AND match_id IN (
                    SELECT match_id FROM football_matches 
                    WHERE season_id = %(season_id)s AND status = 'Ended'
                )
            """
            
            result = self.ch_client.execute(query, {
                'team_id': team_id,
                'season_id': season_id
            })
            
            if result and result[0][0] is not None:
                return {'avg_fouls': round(result[0][0], 2)}
            return {'avg_fouls': 12.0}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ–ª–æ–≤ –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return {'avg_fouls': 12.0}

    def _get_position_diff(self, team1_id: int, team2_id: int, tournament_id: int, season_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            query = """
            SELECT 
                t1.position as pos1,
                t2.position as pos2
            FROM team_positions_cache t1
            CROSS JOIN team_positions_cache t2
            WHERE t1.team_id = %(team1)s 
                AND t2.team_id = %(team2)s
                AND t1.tournament_id = %(tournament_id)s
                AND t2.tournament_id = %(tournament_id)s
                AND t1.season_id = %(season_id)s
                AND t2.season_id = %(season_id)s
            ORDER BY t1.updated_at DESC, t2.updated_at DESC
            LIMIT 1
            """
            
            result = self.ch_client.execute(query, {
                'team1': team1_id,
                'team2': team2_id,
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            if result and result[0][0] is not None and result[0][1] is not None:
                pos1, pos2 = result[0]
                return abs(pos1 - pos2)
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 (—Ä–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ {team1_id} –∏ {team2_id}")
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π: {e}")
            return 0
        
    def get_opponent_yellow_cards_stats(self, team_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—Ç —É —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤"""
        try:
            query = """
            SELECT 
                COUNT(*) as total_opponent_yellows,
                COUNT(DISTINCT fc.match_id) as matches_with_opponent_cards,
                COUNT(*) * 1.0 / COUNT(DISTINCT fc.match_id) as avg_opponent_yellows_per_match
            FROM football_cards fc
            JOIN football_matches fm ON fc.match_id = fm.match_id
            WHERE (fm.home_team_id = %(team_id)s OR fm.away_team_id = %(team_id)s)
            AND fm.season_id = %(season_id)s
            AND fm.status = 'Ended'
            AND fc.card_type = 'yellow'
            AND fc.team_is_home != CASE 
                WHEN fm.home_team_id = %(team_id)s THEN 1 
                ELSE 0 
            END  -- –ö–∞—Ä—Ç–æ—á–∫–∏ —É –°–û–ü–ï–†–ù–ò–ö–ê
            """
            
            result = self.ch_client.execute(query, {'team_id': team_id, 'season_id': season_id})
            
            if result and result[0][0] > 0:
                total_opponent_yellows, matches_with_cards, avg_opponent_yellows = result[0]
                return {
                    'total_opponent_yellows': total_opponent_yellows,
                    'matches_with_opponent_cards': matches_with_cards,
                    'avg_opponent_yellows': round(avg_opponent_yellows, 2)
                }
            return {'total_opponent_yellows': 0, 'matches_with_opponent_cards': 0, 'avg_opponent_yellows': 2.0}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
        return {'total_opponent_yellows': 0, 'matches_with_opponent_cards': 0, 'avg_opponent_yellows': 2.0}
    
    def _is_derby(self, team1_id: int, team2_id: int) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç—á –¥–µ—Ä–±–∏"""
        derby_key1 = (team1_id, team2_id)
        derby_key2 = (team2_id, team1_id)
        
        if derby_key1 in self.DERBY_PAIRS:
            return True, self.DERBY_PAIRS[derby_key1]
        elif derby_key2 in self.DERBY_PAIRS:
            return True, self.DERBY_PAIRS[derby_key2]
        
        return False, ""

    def predict_yellow_cards(self, team1_id: int, team2_id: int, referee_id: int, 
                            tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–£–õ–£–ß–®–ï–ù–ù–´–ô –ø—Ä–æ–≥–Ω–æ–∑ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            team1_home_away = self._get_team_home_away_yellow_stats(team1_id, season_id)
            team2_home_away = self._get_team_home_away_yellow_stats(team2_id, season_id)
            
            team1_fouls = self._get_team_fouls_stats(team1_id, season_id)
            team2_fouls = self._get_team_fouls_stats(team2_id, season_id)
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∏
            referee_stats = self._get_referee_yellow_stats(referee_id, tournament_id)
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            h2h_stats = self._get_h2h_yellow_stats(team1_id, team2_id)
            position_diff = self._get_position_diff(team1_id, team2_id, tournament_id, season_id)
            is_derby, derby_name = self._is_derby(team1_id, team2_id)
            
            # 4. –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (40% –∫–æ–º–∞–Ω–¥—ã + 40% —Ä–µ—Ñ–µ—Ä–∏ + 20% –∫–æ–Ω—Ç–µ–∫—Å—Ç)
            team1_home_yellows = team1_home_away['home']['avg_yellows']
            team2_away_yellows = team2_home_away['away']['avg_yellows']
            
            team_component = (team1_home_yellows + team2_away_yellows) / 2 * 0.4
            referee_component = referee_stats['avg_yellows'] * 0.4
            context_component = h2h_stats['avg_yellows'] * 0.2
            
            # 5. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_adjustment = 0.0
            if is_derby:
                context_adjustment += 0.3
            if position_diff <= 3:
                context_adjustment += 0.2
            elif position_diff >= 8:
                context_adjustment += 0.1
            
            final_prediction = team_component + referee_component + context_component + context_adjustment
            
            # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            if final_prediction < 3.2:
                cards_total = "–¢–ú 4.5"
                confidence = "üî¥ –í—ã—Å–æ–∫–∞—è"
            elif final_prediction < 3.8:
                cards_total = "–¢–ú 4.5"
                confidence = "üü° –°—Ä–µ–¥–Ω—è—è"
            elif final_prediction < 4.4:
                cards_total = "–¢–ë 4.5"
                confidence = "üü° –°—Ä–µ–¥–Ω—è—è"
            else:
                cards_total = "–¢–ë 4.5"
                confidence = "üî¥ –í—ã—Å–æ–∫–∞—è"
            
            # 7. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
            def get_aggression_indicator(avg_yellows):
                if avg_yellows < 3.0:
                    return "üü¢"
                elif avg_yellows < 4.0:
                    return "üü°"
                else:
                    return "üî¥"
            
            return {
                'predicted_yellow_cards': round(final_prediction, 2),
                'team1_home_yellows': team1_home_yellows,
                'team2_away_yellows': team2_away_yellows,
                'referee_avg_yellows': referee_stats['avg_yellows'],
                'referee_name': referee_stats['name'],
                'referee_games': referee_stats['games'],
                'h2h_avg_yellows': h2h_stats['avg_yellows'],
                'position_diff': position_diff,
                'team1_avg_fouls': team1_fouls['avg_fouls'],
                'team2_avg_fouls': team2_fouls['avg_fouls'],
                'is_derby': is_derby,
                'derby_name': derby_name,
                'cards_total_prediction': cards_total,
                'confidence': confidence,
                'team1_aggression': get_aggression_indicator(team1_home_yellows),
                'team2_aggression': get_aggression_indicator(team2_away_yellows),
                'referee_aggression': get_aggression_indicator(referee_stats['avg_yellows']),
                'h2h_aggression': get_aggression_indicator(h2h_stats['avg_yellows'])
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return {}

    def get_referee_stats_from_db(self, referee_id: int, tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∏ –∏–∑ –ë–î"""
        try:
            query = """
            SELECT 
                referee_id, referee_name, referee_yellow_cards, referee_red_cards,
                referee_yellow_red_cards, referee_games, referee_country
            FROM match_fixtures 
            WHERE referee_id = %(referee_id)s
            AND tournament_id = %(tournament_id)s
            AND season_id = %(season_id)s
            LIMIT 1
            """
            
            result = self.ch_client.execute(query, {
                'referee_id': referee_id,
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            if result:
                return {
                    'referee_id': result[0][0],
                    'name': result[0][1],
                    'yellow_cards': result[0][2],
                    'red_cards': result[0][3],
                    'yellow_red_cards': result[0][4],
                    'games': result[0][5],
                    'country': result[0][6]
                }
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∏: {e}")
            return {}

    def get_match_referee(self, home_team_id: int, away_team_id: int, tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∏ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ –º–∞—Ç—á–∞"""
        try:
            query = """
            SELECT 
                referee_id, referee_name, referee_yellow_cards, referee_red_cards,
                referee_yellow_red_cards, referee_games, referee_country
            FROM match_fixtures 
            WHERE home_team_id = %(home_team_id)s 
                AND away_team_id = %(away_team_id)s
                AND tournament_id = %(tournament_id)s 
                AND season_id = %(season_id)s
            ORDER BY start_timestamp DESC 
            LIMIT 1
            """
            
            result = self.ch_client.execute(query, {
                'home_team_id': home_team_id,
                'away_team_id': away_team_id, 
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            if result:
                return {
                    'referee_id': result[0][0],
                    'name': result[0][1],
                    'yellow_cards': result[0][2],
                    'red_cards': result[0][3],
                    'yellow_red_cards': result[0][4],
                    'games': result[0][5],
                    'country': result[0][6]
                }
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∏ –º–∞—Ç—á–∞: {e}")
            return {}

    def get_team_home_away_performance(self, team_id: int, tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–º–∞ –∏ –≤ –≥–æ—Å—Ç—è—Ö"""
        try:
            query = """
            SELECT 
                CASE 
                    WHEN fm.home_team_id = %(team_id)s THEN 'home'
                    ELSE 'away'
                END as match_type,
                COUNT(*) as matches,
                AVG(CASE 
                    WHEN fm.home_team_id = %(team_id)s THEN fm.home_score
                    ELSE fm.away_score 
                END) as avg_goals_scored,
                AVG(CASE 
                    WHEN fm.home_team_id = %(team_id)s THEN fm.away_score
                    ELSE fm.home_score 
                END) as avg_goals_conceded,
                AVG(CASE 
                    WHEN fm.home_team_id = %(team_id)s THEN 
                        CASE WHEN fm.home_score > fm.away_score THEN 1 ELSE 0 END
                    ELSE 
                        CASE WHEN fm.away_score > fm.home_score THEN 1 ELSE 0 END
                END) as win_rate
            FROM football_matches fm
            WHERE (fm.home_team_id = %(team_id)s OR fm.away_team_id = %(team_id)s)
            AND fm.tournament_id = %(tournament_id)s
            AND fm.season_id = %(season_id)s
            AND fm.status = 'Ended'
            GROUP BY match_type
            """
            
            results = self.ch_client.execute(query, {
                'team_id': team_id,
                'tournament_id': tournament_id,
                'season_id': season_id
            })
            
            performance = {'home': {}, 'away': {}}
            for match_type, matches, avg_scored, avg_conceded, win_rate in results:
                if match_type == 'home':
                    performance['home'] = {
                        'matches': matches,
                        'avg_goals_scored': avg_scored or 0,
                        'avg_goals_conceded': avg_conceded or 0,
                        'win_rate': (win_rate or 0) * 100
                    }
                elif match_type == 'away':
                    performance['away'] = {
                        'matches': matches,
                        'avg_goals_scored': avg_scored or 0,
                        'avg_goals_conceded': avg_conceded or 0,
                        'win_rate': (win_rate or 0) * 100
                    }
            
            return performance
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö/–≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {e}")
            return {'home': {}, 'away': {}}
        
    def get_team_corners_stats(self, team_id: int, season_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≥–ª–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥—ã"""
        try:
            query = """
            SELECT 
                AVG(fms1.corners) as avg_corners_for,
                AVG(fms2.corners) as avg_corners_against
            FROM football_match_stats fms1
            JOIN football_match_stats fms2 ON fms1.match_id = fms2.match_id 
                AND fms2.team_id != fms1.team_id
            JOIN football_matches fm ON fms1.match_id = fm.match_id
            WHERE fms1.team_id = %(team_id)s
            AND fm.season_id = %(season_id)s
            AND fm.status = 'Ended'
            """
            
            result = self.ch_client.execute(query, {
                'team_id': team_id,
                'season_id': season_id
            })
            
            if result and result[0][0] is not None:
                avg_corners_for, avg_corners_against = result[0]
                return {
                    'avg_corners_for': round(avg_corners_for or 0, 1),
                    'avg_corners_against': round(avg_corners_against or 0, 1),
                    'corners_balance': round((avg_corners_for or 0) - (avg_corners_against or 0), 1)
                }
            return {'avg_corners_for': 0, 'avg_corners_against': 0, 'corners_balance': 0}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≥–ª–æ–≤—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return {'avg_corners_for': 0, 'avg_corners_against': 0, 'corners_balance': 0}
    def get_team_corners_stats_by_venue(self, team_id: int, season_id: int, venue: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≥–ª–æ–≤—ã—Ö —Å —É—á–µ—Ç–æ–º –¥–æ–º–∞—à–Ω–∏—Ö/–≥–æ—Å—Ç–µ–≤—ã—Ö"""
        try:
            query = """
            SELECT 
                AVG(fms1.corners) as avg_corners_for,
                AVG(fms2.corners) as avg_corners_against
            FROM football_match_stats fms1
            JOIN football_match_stats fms2 ON fms1.match_id = fms2.match_id 
                AND fms2.team_id != fms1.team_id
            JOIN football_matches fm ON fms1.match_id = fm.match_id
            WHERE fms1.team_id = %(team_id)s
            AND fms1.team_type = %(venue)s  -- 'home' –∏–ª–∏ 'away'
            AND fm.season_id = %(season_id)s
            AND fm.status = 'Ended'
            """
            
            result = self.ch_client.execute(query, {
                'team_id': team_id,
                'venue': venue,
                'season_id': season_id
            })
        
            if result and result[0][0] is not None:
                    avg_corners_for, avg_corners_against = result[0]
                    return {
                        'avg_corners_for': round(avg_corners_for or 0, 1),
                        'avg_corners_against': round(avg_corners_against or 0, 1),
                        'corners_balance': round((avg_corners_for or 0) - (avg_corners_against or 0), 1)
                    }
            return {'avg_corners_for': 0, 'avg_corners_against': 0, 'corners_balance': 0}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≥–ª–æ–≤—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return {'avg_corners_for': 0, 'avg_corners_against': 0, 'corners_balance': 0}
        
    def predict_match_result_with_home_away(self, team1_id: int, team2_id: int, 
                                          team1_name: str, team2_name: str,
                                          tournament_id: int, season_id: int) -> Dict[str, Any]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —Å —É—á–µ—Ç–æ–º –¥–æ–º–∞—à–Ω–∏—Ö/–≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        try:
            team1_performance = self.get_team_home_away_performance(team1_id, tournament_id, season_id)
            team2_performance = self.get_team_home_away_performance(team2_id, tournament_id, season_id)
            
            if not team1_performance.get('home') or not team2_performance.get('away'):
                return {}
            
            team1_home = team1_performance['home']
            team2_away = team2_performance['away']
            
            # –ü—Ä–æ–≥–Ω–æ–∑ —Å—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–∞—à–Ω–∏—Ö/–≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            predicted_home_goals = (team1_home['avg_goals_scored'] + team2_away['avg_goals_conceded']) / 2
            predicted_away_goals = (team2_away['avg_goals_scored'] + team1_home['avg_goals_conceded']) / 2
            
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º –¥–æ–º–∞—à–Ω–µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
            home_win_prob = (team1_home['win_rate'] + (100 - team2_away['win_rate'])) / 2
            away_win_prob = (team2_away['win_rate'] + (100 - team1_home['win_rate'])) / 2
            draw_prob = max(0, 100 - home_win_prob - away_win_prob)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            total_prob = home_win_prob + draw_prob + away_win_prob
            home_win_prob = (home_win_prob / total_prob) * 100
            draw_prob = (draw_prob / total_prob) * 100
            away_win_prob = (away_win_prob / total_prob) * 100
            
            return {
                'predicted_score': f"{predicted_home_goals:.1f}-{predicted_away_goals:.1f}",
                'probabilities': {
                    'home_win': round(home_win_prob, 1),
                    'draw': round(draw_prob, 1),
                    'away_win': round(away_win_prob, 1)
                },
                'home_stats': team1_home,
                'away_stats': team2_away
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return {}

    # –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê 
    async def get_players_analysis(self, team1_id: int, team2_id: int, team1_name: str, team2_name: str, 
                              tournament_id: int, season_id: int):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        print(f"‚≠ê –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –ö–õ–Æ–ß–ï–í–´–• –ò–ì–†–û–ö–û–í:")
        print("=" * 50)
        
        try:
            team1_key_players = self.get_key_players_progress(team1_id, season_id)
            team2_key_players = self.get_key_players_progress(team2_id, season_id)

            print(f"\nüîë {team1_name} - –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏:")
            if team1_key_players:
                for player in team1_key_players[:3]:
                    trend_icon = "üìà" if player['trend'] == 'up' else "üìâ" if player['trend'] == 'down' else "‚û°Ô∏è"
                    print(f"   ‚Ä¢ {player['name']} ({player['position']}) {trend_icon}")
                    print(f"     –ì–æ–ª—ã: {player['goals']} | –ê—Å—Å–∏—Å—Ç—ã: {player['assists']} | –£–¥–∞—Ä—ã: {player['shots']}")
            else:
                print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤")

            print(f"\nüîë {team2_name} - –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏:")
            if team2_key_players:
                for player in team2_key_players[:3]:
                    trend_icon = "üìà" if player['trend'] == 'up' else "üìâ" if player['trend'] == 'down' else "‚û°Ô∏è"
                    print(f"   ‚Ä¢ {player['name']} ({player['position']}) {trend_icon}")
                    print(f"     –ì–æ–ª—ã: {player['goals']} | –ê—Å—Å–∏—Å—Ç—ã: {player['assists']} | –£–¥–∞—Ä—ã: {player['shots']}")
            else:
                print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")

    async def get_match_analysis(self, team1_id: int, team2_id: int, team1_name: str, team2_name: str, 
                               tournament_id: int = 203, season_id: int = 77142):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
        
        print(f"üéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–ê–¢–ß–ê: {team1_name} vs {team2_name}")
        print("=" * 60)
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ –∫—ç—à–∞
            standings = self.get_current_standings(tournament_id, season_id)
            
            team1_position = standings.get(team1_id, "N/A")
            team2_position = standings.get(team2_id, "N/A")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã
            team1_stats = self.get_team_stats_from_db(team1_id, tournament_id, season_id)
            team2_stats = self.get_team_stats_from_db(team2_id, tournament_id, season_id)
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–∏–Ω–∞–º–∏–∫–µ
            team1_position_data = self.get_team_position_from_db(team1_id, tournament_id, season_id)
            team2_position_data = self.get_team_position_from_db(team2_id, tournament_id, season_id)
            
            team1_pos_trend = self.analyze_position_trend(team1_position_data)
            team2_pos_trend = self.analyze_position_trend(team2_position_data)

            # 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            team1_form = self.get_team_form_from_db(team1_id, season_id)
            team2_form = self.get_team_form_from_db(team2_id, season_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
            team1_matches = team1_stats.get('matches', 1)
            team2_matches = team2_stats.get('matches', 1)

            # –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –º–∞—Ç—á
            team1_goals_pm = self.safe_divide(team1_stats.get('goalsScored', 0), team1_matches)
            team2_goals_pm = self.safe_divide(team2_stats.get('goalsScored', 0), team2_matches)
            
            team1_shots_pm = self.safe_divide(team1_stats.get('shots', 0), team1_matches)
            team2_shots_pm = self.safe_divide(team2_stats.get('shots', 0), team2_matches)
            
            team1_shots_on_target_pm = self.safe_divide(team1_stats.get('shotsOnTarget', 0), team1_matches)
            team2_shots_on_target_pm = self.safe_divide(team2_stats.get('shotsOnTarget', 0), team2_matches)
            
            # 5. –ü–æ–ª—É—á–∞–µ–º xG –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            team1_xg, team2_xg = self.get_team_xg_from_db(team1_id, team2_id, season_id)

            # –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
            print(f"\nüè† {team1_name} (–¥–æ–º–∞) vs üõ¨ {team2_name} (–≤ –≥–æ—Å—Ç—è—Ö)")
            print("=" * 50)

            # –ü–û–ó–ò–¶–ò–Ø –í –¢–ê–ë–õ–ò–¶–ï
            print(f"\nüèÜ –ü–û–ó–ò–¶–ò–Ø –í –¢–ê–ë–õ–ò–¶–ï:")
            print(f"   {team1_name}: {team1_position} –º–µ—Å—Ç–æ {team1_pos_trend[1]}")
            print(f"   {team2_name}: {team2_position} –º–µ—Å—Ç–æ {team2_pos_trend[1]}")

            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –∫–ª–∞—Å—Å–µ
            if team1_position != "N/A" and team2_position != "N/A":
                position_diff = abs(int(team1_position) - int(team2_position))
                if position_diff <= 3:
                    class_analysis = "–†–∞–≤–Ω—ã–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∏"
                elif position_diff <= 6:
                    class_analysis = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ" 
                else:
                    class_analysis = "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ"
                print(f"   –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–ª–∞—Å—Å–µ: {position_diff} –ø–æ–∑–∏—Ü–∏–π ({class_analysis})")
            else:
                position_diff = 0
                class_analysis = "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

            # –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
            print(f"\n‚öΩ –†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨ (–Ω–∞ –æ—Å–Ω–æ–≤–µ {team1_matches} –º–∞—Ç—á–µ–π):")
            print(f"   {team1_name}: {team1_goals_pm:.1f} –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á")
            print(f"   {team2_name}: {team2_goals_pm:.1f} –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á")

            print(f"\nüéØ –£–î–ê–†–´:")
            print(f"   {team1_name}: {team1_shots_pm:.1f} —É–¥–∞—Ä–æ–≤ ({team1_shots_on_target_pm:.1f} –≤ —Å—Ç–≤–æ—Ä) –∑–∞ –º–∞—Ç—á")
            print(f"   {team2_name}: {team2_shots_pm:.1f} —É–¥–∞—Ä–æ–≤ ({team2_shots_on_target_pm:.1f} –≤ —Å—Ç–≤–æ—Ä) –∑–∞ –º–∞—Ç—á")

            # xG –ê–ù–ê–õ–ò–ó
            print(f"\nüìà –†–ï–ê–õ–¨–ù–´–ô xG –ê–ù–ê–õ–ò–ó:")
            print(f"   {team1_name}: {team1_xg:.2f} xG")
            print(f"   {team2_name}: {team2_xg:.2f} xG")

            # –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
            team1_efficiency = team1_goals_pm - team1_xg
            team2_efficiency = team2_goals_pm - team2_xg

            print(f"\nüéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:")
            print(f"   {team1_name}: {team1_goals_pm:.1f} –≥–æ–ª–æ–≤ –ø—Ä–∏ {team1_xg:.1f} xG ({team1_efficiency:+.2f})")
            print(f"   {team2_name}: {team2_goals_pm:.1f} –≥–æ–ª–æ–≤ –ø—Ä–∏ {team2_xg:.1f} xG ({team2_efficiency:+.2f})")

            # –ö–û–ù–¢–†–û–õ–¨ –ò–ì–†–´
            team1_possession = team1_stats.get('averageBallPossession', 0)
            team2_possession = team2_stats.get('averageBallPossession', 0)
            
            print(f"\nüìä –ö–û–ù–¢–†–û–õ–¨ –ò–ì–†–´:")
            print(f"   {team1_name}: {team1_possession:.1f}% –≤–ª–∞–¥–µ–Ω–∏—è")
            print(f"   {team2_name}: {team2_possession:.1f}% –≤–ª–∞–¥–µ–Ω–∏—è")

            # –ü–ï–†–ï–î–ê–ß–ò
            team1_pass_accuracy = team1_stats.get('accuratePassesPercentage', 0)
            team2_pass_accuracy = team2_stats.get('accuratePassesPercentage', 0)

            print(f"\nüîÑ –¢–û–ß–ù–û–°–¢–¨ –ü–ï–†–ï–î–ê–ß:")
            print(f"   {team1_name}: {team1_pass_accuracy:.1f}%")
            print(f"   {team2_name}: {team2_pass_accuracy:.1f}%")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–æ—Å—Å–∞—Ö –∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á–∞—Ö
            crosses_longballs_data = self.get_team_crosses_longballs_from_db(team1_id, team2_id, season_id)

            team1_crosses_data = crosses_longballs_data.get(team1_id, {})
            team2_crosses_data = crosses_longballs_data.get(team2_id, {})

            # –ê–ö–¢–ò–í–ù–û–°–¢–¨ –§–õ–ê–ù–ì–û–í
            print(f"\nüîÑ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –§–õ–ê–ù–ì–û–í:")
            team1_total_crosses = team1_crosses_data.get('total_crosses', 0)
            team2_total_crosses = team2_crosses_data.get('total_crosses', 0)
            team1_accurate_crosses = team1_crosses_data.get('accurate_crosses', 0)
            team2_accurate_crosses = team2_crosses_data.get('accurate_crosses', 0)

            team1_cross_accuracy = self.safe_divide(team1_accurate_crosses, team1_total_crosses) * 100
            team2_cross_accuracy = self.safe_divide(team2_accurate_crosses, team2_total_crosses) * 100

            print(f"   {team1_name}: {team1_total_crosses:.1f} –∫—Ä–æ—Å—Å–æ–≤ ({team1_cross_accuracy:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å)")
            print(f"   {team2_name}: {team2_total_crosses:.1f} –∫—Ä–æ—Å—Å–æ–≤ ({team2_cross_accuracy:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å)")

            # –î–ê–õ–¨–ù–ò–ï –ê–¢–ê–ö–ò
            print(f"\nüéØ –î–ê–õ–¨–ù–ò–ï –ê–¢–ê–ö–ò:")
            team1_total_long_balls = team1_crosses_data.get('total_long_balls', 0)
            team2_total_long_balls = team2_crosses_data.get('total_long_balls', 0)
            team1_accurate_long_balls = team1_crosses_data.get('accurate_long_balls', 0)
            team2_accurate_long_balls = team2_crosses_data.get('accurate_long_balls', 0)

            team1_longball_accuracy = self.safe_divide(team1_accurate_long_balls, team1_total_long_balls) * 100
            team2_longball_accuracy = self.safe_divide(team2_accurate_long_balls, team2_total_long_balls) * 100

            print(f"   {team1_name}: {team1_total_long_balls:.1f} –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á ({team1_longball_accuracy:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å)")
            print(f"   {team2_name}: {team2_total_long_balls:.1f} –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á ({team2_longball_accuracy:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å)")

            # –û–ë–û–†–û–ù–ê
            team1_goals_conceded_pm = self.safe_divide(team1_stats.get('goalsConceded', 0), team1_matches)
            team2_goals_conceded_pm = self.safe_divide(team2_stats.get('goalsConceded', 0), team2_matches)

            print(f"\nüõ°Ô∏è –û–ë–û–†–û–ù–ê:")
            print(f"   {team1_name}: {team1_goals_conceded_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞ –º–∞—Ç—á")
            print(f"   {team2_name}: {team2_goals_conceded_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞ –º–∞—Ç—á")
            # –£–ì–õ–û–í–´–ï
            print(f"\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ì–õ–û–í–´–•:")
            team1_corners_stats = self.get_team_corners_stats(team1_id, season_id)
            team2_corners_stats = self.get_team_corners_stats(team2_id, season_id)
            team1_corners_stats = self.get_team_corners_stats_by_venue(team1_id, season_id, 'home')  # –•–æ–∑—è–µ–≤–∞
            team2_corners_stats = self.get_team_corners_stats_by_venue(team2_id, season_id, 'away')  # –ì–æ—Å—Ç–∏

            
            print(f"   {team1_name} (–æ–±—â–∏–µ):")
            print(f"      ‚Ä¢ –ê—Ç–∞–∫–∞: {team1_corners_stats['avg_corners_for']} —É–≥–ª–æ–≤—ã—Ö –∑–∞ –º–∞—Ç—á")
            print(f"      ‚Ä¢ –û–±–æ—Ä–æ–Ω–∞: {team1_corners_stats['avg_corners_against']} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç")
            print(f"      ‚Ä¢ –ë–∞–ª–∞–Ω—Å: {team1_corners_stats['corners_balance']:+.1f}")

            print(f"   {team2_name} (–æ–±—â–∏–µ):")
            print(f"      ‚Ä¢ –ê—Ç–∞–∫–∞: {team2_corners_stats['avg_corners_for']} —É–≥–ª–æ–≤—ã—Ö –∑–∞ –º–∞—Ç—á") 
            print(f"      ‚Ä¢ –û–±–æ—Ä–æ–Ω–∞: {team2_corners_stats['avg_corners_against']} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç")
            print(f"      ‚Ä¢ –ë–∞–ª–∞–Ω—Å: {team2_corners_stats['corners_balance']:+.1f}")

            print(f"   {team1_name} (–¥–æ–º–∞):")
            print(f"      ‚Ä¢ –ê—Ç–∞–∫–∞: {team1_corners_stats['avg_corners_for']} —É–≥–ª–æ–≤—ã—Ö –∑–∞ –º–∞—Ç—á")
            print(f"      ‚Ä¢ –û–±–æ—Ä–æ–Ω–∞: {team1_corners_stats['avg_corners_against']} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç")
            print(f"      ‚Ä¢ –ë–∞–ª–∞–Ω—Å: {team1_corners_stats['corners_balance']:+.1f}")

            print(f"   {team2_name} (–≤ –≥–æ—Å—Ç—è—Ö):")
            print(f"      ‚Ä¢ –ê—Ç–∞–∫–∞: {team2_corners_stats['avg_corners_for']} —É–≥–ª–æ–≤—ã—Ö –∑–∞ –º–∞—Ç—á")
            print(f"      ‚Ä¢ –û–±–æ—Ä–æ–Ω–∞: {team2_corners_stats['avg_corners_against']} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç")
            print(f"      ‚Ä¢ –ë–∞–ª–∞–Ω—Å: {team2_corners_stats['corners_balance']:+.1f}")


            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Å—Å–∏–Ω–≥–∞
            total_corners = team1_corners_stats['avg_corners_for'] + team2_corners_stats['avg_corners_for']
            print(f"\nüìä –û–ñ–ò–î–ê–ï–ú–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —É–≥–ª–æ–≤—ã—Ö –∑–∞ –º–∞—Ç—á: {total_corners:.1f}")
            print(f"   ‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏: {'üî¥ –í—ã—Å–æ–∫–∞—è' if total_corners > 10 else 'üü° –°—Ä–µ–¥–Ω—è—è' if total_corners > 7 else 'üü¢ –ù–∏–∑–∫–∞—è'}")
            # –ê–ì–†–ï–°–°–ò–í–ù–û–°–¢–¨
            print(f"\nüü® –ê–ì–†–ï–°–°–ò–í–ù–û–°–¢–¨:")
            team1_fouls_pm = self.safe_divide(team1_stats.get('fouls', 0), team1_matches)
            team2_fouls_pm = self.safe_divide(team2_stats.get('fouls', 0), team2_matches)

            # –î–û–ë–ê–í–õ–Ø–ï–ú –ñ–ï–õ–¢–´–ï –ö–ê–†–¢–û–ß–ö–ò –ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ú–ï–¢–û–î–û–í
            team1_yellow_stats = self._get_team_yellow_stats(team1_id, season_id)
            team2_yellow_stats = self._get_team_yellow_stats(team2_id, season_id)

            # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ê–†–¢–û–ß–ö–ò –°–û–ü–ï–†–ù–ò–ö–û–í
            team1_opponent_yellow_stats = self.get_opponent_yellow_cards_stats(team1_id, season_id)
            team2_opponent_yellow_stats = self.get_opponent_yellow_cards_stats(team2_id, season_id)

            print(f"   {team1_name}: {team1_fouls_pm:.1f} —Ñ–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á")
            print(f"   {team2_name}: {team2_fouls_pm:.1f} —Ñ–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á")

            print(f"\nüü® –ñ–ï–õ–¢–´–ï –ö–ê–†–¢–û–ß–ö–ò:")
            print(f"   {team1_name}: {team1_yellow_stats['avg_yellows']} –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –º–∞—Ç—á")
            print(f"   {team2_name}: {team2_yellow_stats['avg_yellows']} –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –º–∞—Ç—á")

            print(f"\nüü® –ö–ê–†–¢–û–ß–ö–ò –£ –°–û–ü–ï–†–ù–ò–ö–û–í:")
            print(f"   –ü—Ä–æ—Ç–∏–≤ {team1_name}: {team1_opponent_yellow_stats['avg_opponent_yellows']} –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –º–∞—Ç—á")
            print(f"   –ü—Ä–æ—Ç–∏–≤ {team2_name}: {team2_opponent_yellow_stats['avg_opponent_yellows']} –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –º–∞—Ç—á")

            # –ê–Ω–∞–ª–∏–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –ê–ì–†–ï–°–°–ò–í–ù–û–°–¢–ò:")
            team1_total_yellows = team1_yellow_stats['avg_yellows'] + team1_opponent_yellow_stats['avg_opponent_yellows']
            team2_total_yellows = team2_yellow_stats['avg_yellows'] + team2_opponent_yellow_stats['avg_opponent_yellows']

            print(f"   –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –º–∞—Ç—á–∞—Ö {team1_name}: {team1_total_yellows:.1f} –∑–∞ –º–∞—Ç—á")
            print(f"   –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –º–∞—Ç—á–∞—Ö {team2_name}: {team2_total_yellows:.1f} –∑–∞ –º–∞—Ç—á")

            # –ö–ê–ß–ï–°–¢–í–û –ú–û–ú–ï–ù–¢–û–í
            team1_big_chances_pm = self.safe_divide(team1_stats.get('bigChances', 0), team1_matches)
            team2_big_chances_pm = self.safe_divide(team2_stats.get('bigChances', 0), team2_matches)
            team1_big_chances_missed_pm = self.safe_divide(team1_stats.get('bigChancesMissed', 0), team1_matches)
            team2_big_chances_missed_pm = self.safe_divide(team2_stats.get('bigChancesMissed', 0), team2_matches)

            print(f"\nüé™ –ö–ê–ß–ï–°–¢–í–û –ú–û–ú–ï–ù–¢–û–í:")
            print(f"   {team1_name}: {team1_big_chances_pm:.1f} –±–æ–ª—å—à–∏—Ö —à–∞–Ω—Å–æ–≤ ({team1_big_chances_missed_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–æ)")
            print(f"   {team2_name}: {team2_big_chances_pm:.1f} –±–æ–ª—å—à–∏—Ö —à–∞–Ω—Å–æ–≤ ({team2_big_chances_missed_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–æ)")

            # –ê–ù–ê–õ–ò–ó –ó–û–ù –ê–¢–ê–ö
            print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ó–û–ù –ê–¢–ê–ö –ò –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô:")

            team1_total_goals = team1_stats.get('goalsScored', 1)
            team2_total_goals = team2_stats.get('goalsScored', 1)

            print(f"\nüèπ {team1_name} –ê–¢–ê–ö–£–ï–¢:")
            team1_inside = self.safe_divide(team1_stats.get('goalsFromInsideTheBox', 0), team1_total_goals) * 100
            team1_outside = self.safe_divide(team1_stats.get('goalsFromOutsideTheBox', 0), team1_total_goals) * 100  
            team1_headed = self.safe_divide(team1_stats.get('headedGoals', 0), team1_total_goals) * 100

            total_percent = team1_inside + team1_outside + team1_headed
            if total_percent > 100:
                team1_inside = (team1_inside / total_percent) * 100
                team1_outside = (team1_outside / total_percent) * 100
                team1_headed = (team1_headed / total_percent) * 100

            print(f"   ‚Ä¢ {team1_inside:.0f}% –≥–æ–ª–æ–≤ –∏–∑–Ω—É—Ç—Ä–∏ —à—Ç—Ä–∞—Ñ–Ω–æ–π")
            print(f"   ‚Ä¢ {team1_outside:.0f}% –≥–æ–ª–æ–≤ –∏–∑–¥–∞–ª–∏")
            print(f"   ‚Ä¢ {team1_headed:.0f}% –≥–æ–ª–æ–≤ –≥–æ–ª–æ–≤–æ–π")

            print(f"\nüèπ {team2_name} –ê–¢–ê–ö–£–ï–¢:")
            team2_inside = self.safe_divide(team2_stats.get('goalsFromInsideTheBox', 0), team2_total_goals) * 100
            team2_outside = self.safe_divide(team2_stats.get('goalsFromOutsideTheBox', 0), team2_total_goals) * 100  
            team2_headed = self.safe_divide(team2_stats.get('headedGoals', 0), team2_total_goals) * 100

            total_percent = team2_inside + team2_outside + team2_headed
            if total_percent > 100:
                team2_inside = (team2_inside / total_percent) * 100
                team2_outside = (team2_outside / total_percent) * 100
                team2_headed = (team2_headed / total_percent) * 100

            print(f"   ‚Ä¢ {team2_inside:.0f}% –≥–æ–ª–æ–≤ –∏–∑–Ω—É—Ç—Ä–∏ —à—Ç—Ä–∞—Ñ–Ω–æ–π")
            print(f"   ‚Ä¢ {team2_outside:.0f}% –≥–æ–ª–æ–≤ –∏–∑–¥–∞–ª–∏")
            print(f"   ‚Ä¢ {team2_headed:.0f}% –≥–æ–ª–æ–≤ –≥–æ–ª–æ–≤–æ–π")

            # –§–û–†–ú–ê –ö–û–ú–ê–ù–î
            matches_count = len(team1_form) if team1_form else 0

            if matches_count == 0:
                print(f"\nüìà –§–û–†–ú–ê (–ø–µ—Ä–≤—ã–π —Ç—É—Ä - –º–∞—Ç—á–µ–π –Ω–µ—Ç)")
            else:
                form_text = "–º–∞—Ç—á" if matches_count == 1 else f"–ø–æ—Å–ª–µ–¥–Ω–∏–µ {matches_count} –º–∞—Ç—á–∞" if matches_count < 5 else "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π"
                print(f"\nüìà –§–û–†–ú–ê (–∑–∞ {form_text}):")

            if team1_form:
                team1_form_results = [match[6] for match in team1_form]
                team1_form_display = team1_form_results[::-1]
                form_icons = ''.join(['üü¢' if r == 'W' else 'üü°' if r == 'D' else 'üî¥' for r in team1_form_display])
                print(f"   {team1_name}: {form_icons}")
                if matches_count > 0:
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {', '.join([r for r in team1_form_display])}")
            else:
                print(f"   {team1_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
            if team2_form:
                team2_form_results = [match[6] for match in team2_form]
                team2_form_display = team2_form_results[::-1]
                form_icons = ''.join(['üü¢' if r == 'W' else 'üü°' if r == 'D' else 'üî¥' for r in team2_form_display])
                print(f"   {team2_name}: {form_icons}")
                if matches_count > 0:
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {', '.join([r for r in team2_form_display])}")
            else:
                print(f"   {team2_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            # –ò–°–¢–û–†–ò–Ø –õ–ò–ß–ù–´–• –í–°–¢–†–ï–ß
            print(f"\nüìä –ò–°–¢–û–†–ò–Ø –õ–ò–ß–ù–´–• –í–°–¢–†–ï–ß ({team1_name} vs {team2_name}):")
            h2h_all_time = self.get_team_all_time_stats(team1_id, team2_id)

            if h2h_all_time:
                print(f"\nü§ù –í–°–ï–ì–û –ú–ê–¢–ß–ï–ô: {h2h_all_time['total_matches']}")

                if h2h_all_time['total_matches'] > 0:
                    print(f"   ‚Ä¢ {team1_name}: {h2h_all_time['team1_wins']} –ø–æ–±–µ–¥ ({h2h_all_time['team1_win_rate']:.1f}%)")
                    print(f"   ‚Ä¢ {team2_name}: {h2h_all_time['team2_wins']} –ø–æ–±–µ–¥ ({h2h_all_time['team2_win_rate']:.1f}%)")
                    print(f"   ‚Ä¢ –ù–∏—á—å–∏—Ö: {h2h_all_time['draws']} ({h2h_all_time['draws']/h2h_all_time['total_matches']*100:.1f}%)")
                else:
                    print(f"   ‚Ä¢ {team1_name}: {h2h_all_time['team1_wins']} –ø–æ–±–µ–¥ (0%)")
                    print(f"   ‚Ä¢ {team2_name}: {h2h_all_time['team2_wins']} –ø–æ–±–µ–¥ (0%)")
                    print(f"   ‚Ä¢ –ù–∏—á—å–∏—Ö: {h2h_all_time['draws']} (0%)")
                    print("   ü§ù –ö–æ–º–∞–Ω–¥—ã —Ä–∞–Ω–µ–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å")
                
                print(f"\n‚öΩ –û–ë–©–ê–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨:")
                print(f"   ‚Ä¢ {team1_name}: {h2h_all_time['team1_goals']} –≥–æ–ª–æ–≤")
                print(f"   ‚Ä¢ {team2_name}: {h2h_all_time['team2_goals']} –≥–æ–ª–æ–≤")
                print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: +{h2h_all_time['team1_goals'] - h2h_all_time['team2_goals']}")
                
                print(f"\nüìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ó–ê –ú–ê–¢–ß:")
                print(f"   ‚Ä¢ {team1_name}: {h2h_all_time['team1_avg_goals']:.1f} –≥–æ–ª–æ–≤")
                print(f"   ‚Ä¢ {team2_name}: {h2h_all_time['team2_avg_goals']:.1f} –≥–æ–ª–æ–≤")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á: {h2h_all_time['team1_avg_goals'] + h2h_all_time['team2_avg_goals']:.1f}")

            # –ö–õ–Æ–ß–ï–í–´–ï –ò–ì–†–û–ö–ò
            print(f"\n‚≠ê –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –ö–õ–Æ–ß–ï–í–´–• –ò–ì–†–û–ö–û–í:")
            team1_key_players = self.get_key_players_progress(team1_id, season_id)
            team2_key_players = self.get_key_players_progress(team2_id, season_id)

            print(f"\nüîë {team1_name} - –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏:")
            if team1_key_players:
                for player in team1_key_players[:3]:
                    trend_icon = "üìà" if player['trend'] == 'up' else "üìâ" if player['trend'] == 'down' else "‚û°Ô∏è"
                    print(f"   ‚Ä¢ {player['name']} ({player['position']}) {trend_icon}")
                    print(f"     –ì–æ–ª—ã: {player['goals']} | –ê—Å—Å–∏—Å—Ç—ã: {player['assists']} | –£–¥–∞—Ä—ã: {player['shots']}")
            else:
                print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤")

            print(f"\nüîë {team2_name} - –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏:")
            if team2_key_players:
                for player in team2_key_players[:3]:
                    trend_icon = "üìà" if player['trend'] == 'up' else "üìâ" if player['trend'] == 'down' else "‚û°Ô∏è"
                    print(f"   ‚Ä¢ {player['name']} ({player['position']}) {trend_icon}")
                    print(f"     –ì–æ–ª—ã: {player['goals']} | –ê—Å—Å–∏—Å—Ç—ã: {player['assists']} | –£–¥–∞—Ä—ã: {player['shots']}")
            else:
                print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤")

            # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ü–†–û–ì–ù–û–ó–´
            total_goals = team1_goals_pm + team2_goals_pm
            
            print(f"\nüèÜ –ü–†–û–ì–ù–û–ó –° –£–ß–ï–¢–û–ú –ü–û–ó–ò–¶–ò–ò –í –¢–ê–ë–õ–ò–¶–ï:")
            print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã: {total_goals:.1f}")
            
            if position_diff > 0:
                print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–ª–∞—Å—Å–µ: {position_diff} –ø–æ–∑–∏—Ü–∏–π")

            # –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ü–†–û–ì–ù–û–ó–´
            if team1_position != "N/A" and team2_position != "N/A":
                if total_goals > 2.8 and position_diff <= 4:
                    total_pred = "–¢–ë 2.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üî¥ –í—ã—Å–æ–∫–∞—è"
                elif total_goals > 2.2 and position_diff <= 6:
                    total_pred = "–¢–ë 2.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üü° –°—Ä–µ–¥–Ω—è—è"
                elif total_goals > 1.8:
                    total_pred = "–¢–ú 2.5 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)" 
                    confidence = "üü¢ –ù–∏–∑–∫–∞—è"
                else:
                    total_pred = "–¢–ú 2.5 (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üî¥ –í—ã—Å–æ–∫–∞—è"
            else:
                if total_goals > 2.8:
                    total_pred = "–¢–ë 2.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üü° –°—Ä–µ–¥–Ω—è—è"
                elif total_goals > 2.2:
                    total_pred = "–¢–ë 2.5 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üü¢ –ù–∏–∑–∫–∞—è"
                else:
                    total_pred = "–¢–ú 2.5 (—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"
                    confidence = "üü° –°—Ä–µ–¥–Ω—è—è"

            print(f"\nüí∞ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"   ‚Ä¢ –¢–æ—Ç–∞–ª—ã –≥–æ–ª–æ–≤: {total_pred}")
            print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
            if position_diff > 0:
                print(f"   ‚Ä¢ –§–∞–∫—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏: {class_analysis}")

            # –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´
            print(f"\nüìà –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:")
            insights = self.generate_insights(
                team1_name, team2_name, team1_stats, team2_stats, 
                team1_position, team2_position, team1_matches, team2_matches,
                team1_xg, team2_xg
            )
            
            for i, insight in enumerate(insights, 1):
                print(f"   {i}. {insight}")

            # –ù–û–í–´–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ü–†–û–ì–ù–û–ó–´ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            print(f"\nüé≤ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´:")
            print("=" * 40)

            # –ü–†–û–ì–ù–û–ó –ñ–ï–õ–¢–´–• –ö–ê–†–¢–û–ß–ï–ö –° –£–ß–ï–¢–û–ú –†–ï–§–ï–†–ò
            print(f"\nüü® –ê–ù–ê–õ–ò–ó –î–ò–°–¶–ò–ü–õ–ò–ù–´ –° –£–ß–ï–¢–û–ú –†–ï–§–ï–†–ò:")
            try:
                referee_info = self.get_match_referee(team1_id, team2_id, tournament_id, season_id)
                if referee_info and referee_info.get('referee_id'):
                    yellow_cards_prediction = self.predict_yellow_cards(
                        team1_id, team2_id, referee_info['referee_id'], 
                        tournament_id, season_id
                    )
                    
                    if yellow_cards_prediction:
                        print(f"   üë®‚Äç‚öñÔ∏è –†–µ—Ñ–µ—Ä–∏: {yellow_cards_prediction['referee_name']}")
                        if yellow_cards_prediction['referee_games'] > 0:
                            print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ —É —Ä–µ—Ñ–µ—Ä–∏: {yellow_cards_prediction['referee_avg_yellows']} –∂–µ–ª—Ç—ã—Ö –∑–∞ –º–∞—Ç—á")
                        print(f"   üéØ –ü—Ä–æ–≥–Ω–æ–∑ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {yellow_cards_prediction['predicted_yellow_cards']}")
                        print(f"   üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {yellow_cards_prediction['cards_total_prediction']}")
                        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {yellow_cards_prediction['confidence']}")
                    else:
                        print(f"   ‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                else:
                    print(f"   ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")

            # –ü–†–û–ì–ù–û–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê –° –£–ß–ï–¢–û–ú –î–û–ú–ê–®–ù–ò–•/–ì–û–°–¢–ï–í–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô
            print(f"\nüè†üõ¨ –ü–†–û–ì–ù–û–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê –° –£–ß–ï–¢–û–ú –î–û–ú–ê–®–ù–ï–ì–û –°–¢–ê–î–ò–û–ù–ê:")
            try:
                result_prediction = self.predict_match_result_with_home_away(
                    team1_id, team2_id, team1_name, team2_name, tournament_id, season_id
                )
                
                if result_prediction:
                    home_stats = result_prediction['home_stats']
                    away_stats = result_prediction['away_stats']
                    
                    print(f"   üè† {team1_name} –¥–æ–º–∞:")
                    print(f"      ‚Ä¢ –ü–æ–±–µ–¥: {home_stats['win_rate']:.1f}%")
                    print(f"      ‚Ä¢ –ó–∞–±–∏–≤–∞–µ—Ç: {home_stats['avg_goals_scored']:.1f} –≥–æ–ª–æ–≤")
                    print(f"      ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç: {home_stats['avg_goals_conceded']:.1f} –≥–æ–ª–æ–≤")
                    
                    print(f"   üõ¨ {team2_name} –≤ –≥–æ—Å—Ç—è—Ö:")
                    print(f"      ‚Ä¢ –ü–æ–±–µ–¥: {away_stats['win_rate']:.1f}%")
                    print(f"      ‚Ä¢ –ó–∞–±–∏–≤–∞–µ—Ç: {away_stats['avg_goals_scored']:.1f} –≥–æ–ª–æ–≤")
                    print(f"      ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç: {away_stats['avg_goals_conceded']:.1f} –≥–æ–ª–æ–≤")
                    
                    print(f"   üéØ –ü—Ä–æ–≥–Ω–æ–∑ —Å—á–µ—Ç–∞: {result_prediction['predicted_score']}")
                    
                    probs = result_prediction['probabilities']
                    print(f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–æ–≤:")
                    print(f"      ‚Ä¢ –ü1 ({team1_name}): {probs['home_win']}%")
                    print(f"      ‚Ä¢ –ù–∏—á—å—è: {probs['draw']}%")
                    print(f"      ‚Ä¢ –ü2 ({team2_name}): {probs['away_win']}%")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()

    # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def get_team_form_from_db(self, team_id: int, season_id: int) -> List:
        try:
            query = """
            SELECT 
                fm.match_id, fm.home_team_id, fm.away_team_id, 
                fm.home_score, fm.away_score, fm.match_date,
                CASE 
                    WHEN fm.home_team_id = %(team_id)s AND fm.home_score > fm.away_score THEN 'W'
                    WHEN fm.away_team_id = %(team_id)s AND fm.away_score > fm.home_score THEN 'W' 
                    WHEN fm.home_score = fm.away_score THEN 'D'
                    ELSE 'L'
                END as result
            FROM football_matches fm
            WHERE (fm.home_team_id = %(team_id)s OR fm.away_team_id = %(team_id)s)
            AND fm.status = 'Ended'
            AND fm.season_id = %(season_id)s
            ORDER BY fm.match_date DESC
            LIMIT 5
            """
            return self.ch_client.execute(query, {'team_id': team_id, 'season_id': season_id})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return []

    def get_team_all_time_stats(self, team1_id: int, team2_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –≤ –º–∞—Ç—á–∞—Ö –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        try:
            query = """
            SELECT 
                COUNT(*) as total_matches,
                SUM(CASE 
                    WHEN (home_team_id = %(team1)s AND home_score > away_score) 
                    OR (away_team_id = %(team1)s AND away_score > home_score) THEN 1 
                    ELSE 0 
                END) as team1_wins,
                SUM(CASE 
                    WHEN (home_team_id = %(team2)s AND home_score > away_score) 
                    OR (away_team_id = %(team2)s AND away_score > home_score) THEN 1 
                    ELSE 0 
                END) as team2_wins,
                SUM(CASE WHEN home_score = away_score THEN 1 ELSE 0 END) as draws,
                SUM(CASE WHEN home_team_id = %(team1)s THEN home_score ELSE away_score END) as team1_goals,
                SUM(CASE WHEN home_team_id = %(team2)s THEN home_score ELSE away_score END) as team2_goals,
                AVG(CASE WHEN home_team_id = %(team1)s THEN home_score ELSE away_score END) as team1_avg_goals,
                AVG(CASE WHEN home_team_id = %(team2)s THEN home_score ELSE away_score END) as team2_avg_goals
            FROM football_matches 
            WHERE ((home_team_id = %(team1)s AND away_team_id = %(team2)s)
                OR (home_team_id = %(team2)s AND away_team_id = %(team1)s))
            AND status = 'Ended'
            """
            
            results = self.ch_client.execute(query, {'team1': team1_id, 'team2': team2_id})
            if results:
                total_matches, team1_wins, team2_wins, draws, team1_goals, team2_goals, team1_avg_goals, team2_avg_goals = results[0]
                
                return {
                    'total_matches': total_matches or 0,
                    'team1_wins': team1_wins or 0,
                    'team2_wins': team2_wins or 0,
                    'draws': draws or 0,
                    'team1_goals': team1_goals or 0,
                    'team2_goals': team2_goals or 0,
                    'team1_avg_goals': team1_avg_goals or 0,
                    'team2_avg_goals': team2_avg_goals or 0,
                    'team1_win_rate': (team1_wins / total_matches * 100) if total_matches > 0 else 0,
                    'team2_win_rate': (team2_wins / total_matches * 100) if total_matches > 0 else 0
                }
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å—Ç—Ä–µ—á: {e}")
            return {}

    def get_key_players_progress(self, team_id: int, season_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∏–≥—Ä–æ–∫–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            query = """
            WITH player_totals AS (
                SELECT 
                    player_id,
                    player_name,
                    position,
                    COUNT(*) as matches_played,
                    SUM(goals) as total_goals,
                    SUM(goal_assist) as total_assists,
                    SUM(total_shot) as total_shots,
                    SUM(key_pass) as total_key_passes,
                    AVG(rating) as avg_rating
                FROM football_player_stats fps
                JOIN football_matches fm ON fps.match_id = fm.match_id
                WHERE fps.team_id = %(team_id)s 
                AND fm.season_id = %(season_id)s
                AND fps.minutes_played > 45
                GROUP BY player_id, player_name, position
                HAVING COUNT(*) >= 3
            ),
            player_recent AS (
                SELECT 
                    player_id,
                    AVG(rating) as recent_rating,
                    SUM(goals) as recent_goals,
                    SUM(goal_assist) as recent_assists
                FROM football_player_stats fps
                JOIN football_matches fm ON fps.match_id = fm.match_id
                WHERE fps.team_id = %(team_id)s 
                AND fm.season_id = %(season_id)s
                AND fps.minutes_played > 45
                AND fm.match_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)
                GROUP BY player_id
            )
            SELECT 
                pt.player_id,
                pt.player_name,
                pt.position,
                pt.matches_played,
                pt.total_goals,
                pt.total_assists,
                pt.total_shots,
                pt.avg_rating,
                COALESCE(pr.recent_rating, 0) as recent_rating,
                COALESCE(pr.recent_goals, 0) as recent_goals,
                COALESCE(pr.recent_assists, 0) as recent_assists
            FROM player_totals pt
            LEFT JOIN player_recent pr ON pt.player_id = pr.player_id
            WHERE pt.total_goals + pt.total_assists > 0
            OR pt.avg_rating > 7.0
            ORDER BY (pt.total_goals + pt.total_assists) DESC, pt.avg_rating DESC
            LIMIT 5
            """
            
            results = self.ch_client.execute(query, {'team_id': team_id, 'season_id': season_id})
            key_players = []
            
            for row in results:
                player_id, name, position, matches, goals, assists, shots, avg_rating, recent_rating, recent_goals, recent_assists = row
                
                if recent_rating > avg_rating + 0.3:
                    trend = 'up'
                elif recent_rating < avg_rating - 0.3:
                    trend = 'down' 
                else:
                    trend = 'stable'
                
                key_players.append({
                    'id': player_id,
                    'name': name,
                    'position': position,
                    'matches': matches,
                    'goals': goals,
                    'assists': assists,
                    'shots': shots,
                    'avg_rating': avg_rating,
                    'recent_rating': recent_rating,
                    'trend': trend
                })
            
            return key_players
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {e}")
            return []

    def generate_insights(self, team1_name: str, team2_name: str, team1_stats: Dict, team2_stats: Dict,
                     team1_pos: str, team2_pos: str, team1_matches: int, team2_matches: int,
                     team1_xg: float = 0.0, team2_xg: float = 0.0) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
        insights = []
        
        team1_goals_pm = self.safe_divide(team1_stats.get('goalsScored', 0), team1_matches)
        team2_goals_pm = self.safe_divide(team2_stats.get('goalsScored', 0), team2_matches)
        team1_efficiency = team1_goals_pm - team1_xg
        team2_efficiency = team2_goals_pm - team2_xg
        
        if abs(team1_efficiency) > 0.3:
            if team1_efficiency > 0:
                insights.append(f"{team1_name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (+{team1_efficiency:.2f} xG)")
            else:
                insights.append(f"{team1_name} –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π ({team1_efficiency:.2f} xG)")
                
        if abs(team2_efficiency) > 0.3:
            if team2_efficiency > 0:
                insights.append(f"{team2_name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (+{team2_efficiency:.2f} xG)")
            else:
                insights.append(f"{team2_name} –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π ({team2_efficiency:.2f} xG)")
        
        if team1_pos != "N/A" and team2_pos != "N/A":
            pos1 = int(team1_pos)
            pos2 = int(team2_pos)
            pos_diff = abs(pos1 - pos2)
            
            if pos_diff >= 5:
                if pos1 < pos2:
                    insights.append(f"{team1_name} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –≤ —Ç–∞–±–ª–∏—Ü–µ (-{pos_diff} –ø–æ–∑–∏—Ü–∏–π)")
                else:
                    insights.append(f"{team2_name} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –≤ —Ç–∞–±–ª–∏—Ü–µ (-{pos_diff} –ø–æ–∑–∏—Ü–∏–π)")

        possession_diff = abs(team1_stats.get('averageBallPossession', 0) - team2_stats.get('averageBallPossession', 0))
        if possession_diff > 10:
            if team1_stats.get('averageBallPossession', 0) > team2_stats.get('averageBallPossession', 0):
                insights.append(f"{team1_name} –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –º—è—á–∞ (+{possession_diff:.1f}%)")
            else:
                insights.append(f"{team2_name} –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –º—è—á–∞ (+{possession_diff:.1f}%)")

        team1_defense_pm = self.safe_divide(team1_stats.get('goalsConceded', 0), team1_matches)
        team2_defense_pm = self.safe_divide(team2_stats.get('goalsConceded', 0), team2_matches)
        
        if team1_defense_pm < team2_defense_pm - 0.3:
            insights.append(f"{team1_name} –Ω–∞–¥–µ–∂–Ω–µ–µ –≤ –æ–±–æ—Ä–æ–Ω–µ ({team1_defense_pm:.1f} vs {team2_defense_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö)")
        elif team2_defense_pm < team1_defense_pm - 0.3:
            insights.append(f"{team2_name} –Ω–∞–¥–µ–∂–Ω–µ–µ –≤ –æ–±–æ—Ä–æ–Ω–µ ({team2_defense_pm:.1f} vs {team1_defense_pm:.1f} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö)")

        return insights[:5] or ["–û–±–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–≥—Ä—É"]