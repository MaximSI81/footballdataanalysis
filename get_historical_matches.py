import asyncio
from datetime import datetime
from clickhouse_driver import Client
from sofascore_wrapper.api import SofascoreAPI

class TournamentMatchesCollector:
    def __init__(self, ch_host: str, ch_user: str, ch_password: str, ch_database: str = 'football_db'):
        self.ch_client = Client(
            host=ch_host,
            user=ch_user,
            password=ch_password,
            database=ch_database
        )
        self.api = None
    
    async def collect_season_data(self, tournament_id: int, season_id: int, season_name: str):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–æ —Å–µ–∑–æ–Ω–∞ (30 —Ç—É—Ä–æ–≤)"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
            self.api = SofascoreAPI()
            
            print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å–µ–∑–æ–Ω–∞: {season_name}")
            print("=" * 50)
            
            all_matches_data = []
            successful_rounds = 0
            
            for round_number in range(1, 31):  # –í—Å–µ–≥–¥–∞ 30 —Ç—É—Ä–æ–≤
                print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä {round_number}...")
                
                round_matches = await self.get_round_matches(tournament_id, season_id, round_number)
                
                if round_matches:
                    all_matches_data.extend(round_matches)
                    successful_rounds += 1
                    print(f"‚úÖ –¢—É—Ä {round_number}: {len(round_matches)} –º–∞—Ç—á–µ–π")
                else:
                    print(f"‚ö†Ô∏è  –¢—É—Ä {round_number}: –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await asyncio.sleep(1)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if all_matches_data:
                self.insert_matches_data(all_matches_data)
                print(f"\nüéâ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –£—Å–ø–µ—à–Ω—ã—Ö —Ç—É—Ä–æ–≤: {successful_rounds}/30")
                print(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(all_matches_data)} –º–∞—Ç—á–µ–π")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–µ–∑–æ–Ω–∞ {season_name}: {e}")
            return False
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
            if self.api:
                await self.api.close()
    
    async def get_round_matches(self, tournament_id: int, season_id: int, round_number: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–∞"""
        try:
            endpoint = f"/unique-tournament/{tournament_id}/season/{season_id}/events/round/{round_number}"
            print(f"üîç API –∑–∞–ø—Ä–æ—Å: {endpoint}")
            
            data = await self.api._get(endpoint)
            
            matches_data = []
            for match in data.get('events', []):
                match_info = self.extract_match_info(match, tournament_id, season_id, round_number)
                if match_info:
                    matches_data.append(match_info)
            
            return matches_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π —Ç—É—Ä–∞ {round_number}: {e}")
            return []
    
    def extract_match_info(self, match: dict, tournament_id: int, season_id: int, round_number: int):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ"""
        try:
            home_score = match.get('homeScore', {}).get('current')
            away_score = match.get('awayScore', {}).get('current')
            venue = match.get('venue', {}).get('name')
            
            match_info = {
                'match_id': match['id'],
                'tournament_id': tournament_id,
                'season_id': season_id,
                'round_number': round_number,
                'match_date': datetime.fromtimestamp(match['startTimestamp']).date(),
                'home_team_id': match['homeTeam']['id'],
                'home_team_name': match['homeTeam']['name'],
                'away_team_id': match['awayTeam']['id'],
                'away_team_name': match['awayTeam']['name'],
                'home_score': home_score if home_score is not None else 0,
                'away_score': away_score if away_score is not None else 0,
                'status': match['status']['description'],
                'venue': venue if venue is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'start_timestamp': datetime.fromtimestamp(match['startTimestamp']),
                'created_at': datetime.now()
            }
            return match_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ {match.get('id')}: {e}")
            return None
    
    def insert_matches_data(self, matches_data: list):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π –≤ ClickHouse"""
        try:
            if not matches_data:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
                return
            
            query = """
            INSERT INTO football_matches (
                match_id, tournament_id, season_id, round_number, match_date,
                home_team_id, home_team_name, away_team_id, away_team_name,
                home_score, away_score, status, venue, start_timestamp, created_at
            ) VALUES
            """
            
            data = []
            for match in matches_data:
                data.append((
                    match['match_id'],
                    match['tournament_id'],
                    match['season_id'],
                    match['round_number'],
                    match['match_date'],
                    match['home_team_id'],
                    match['home_team_name'],
                    match['away_team_id'],
                    match['away_team_name'],
                    match['home_score'],
                    match['away_score'],
                    match['status'],
                    match['venue'],
                    match['start_timestamp'],
                    match['created_at']
                ))
            
            self.ch_client.execute(query, data)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {len(data)} –º–∞—Ç—á–µ–π –≤ football_matches")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –î–í–£–• –°–ï–ó–û–ù–û–í
async def main():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–≤–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–∞ –ø–æ 30 —Ç—É—Ä–æ–≤ –∫–∞–∂–¥—ã–π"""
    
    collector = TournamentMatchesCollector(
        ch_host='localhost',
        ch_user='username', 
        ch_password='password',
        ch_database='football_db'
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –†–ü–õ
    TOURNAMENT_ID = 203  # Russian Premier League
    
    # –î–≤–∞ –Ω—É–∂–Ω—ã—Ö —Å–µ–∑–æ–Ω–∞
    SEASONS = [
        (52470, "–†–ü–õ 2023/2024"),  # season_id, –Ω–∞–∑–≤–∞–Ω–∏–µ
        (61712, "–†–ü–õ 2024/2025"),  # season_id, –Ω–∞–∑–≤–∞–Ω–∏–µ
    ]
    
    for season_id, season_name in SEASONS:
        print(f"\n{'='*60}")
        print(f"üöÄ –ó–ê–ì–†–£–ó–ö–ê –°–ï–ó–û–ù–ê: {season_name}")
        print(f"üìä –¢—É—Ä–Ω–∏—Ä: {TOURNAMENT_ID}, –°–µ–∑–æ–Ω: {season_id}")
        print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤: 30")
        print('='*60)
        
        success = await collector.collect_season_data(
            tournament_id=TOURNAMENT_ID,
            season_id=season_id, 
            season_name=season_name
        )
        
        if success:
            print(f"üéâ –°–µ–∑–æ–Ω {season_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∑–æ–Ω–∞ {season_name}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ–∑–æ–Ω–∞–º–∏
        print("\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–µ–∑–æ–Ω–æ–º...")
        await asyncio.sleep(3)



if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ - –¥–≤–∞ —Å–µ–∑–æ–Ω–∞ –ø–æ 30 —Ç—É—Ä–æ–≤
    asyncio.run(main())
    