from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from football_match_forecast import AdvancedFootballAnalyzer
import io
import sys
import os
import asyncio
from dotenv import load_dotenv

load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECT_LEAGUE, SELECT_HOME_TEAM, SELECT_AWAY_TEAM, SELECT_MAIN_CATEGORY, SELECT_SUB_CATEGORY = range(5)

# –°–ª–æ–≤–∞—Ä—å –ª–∏–≥ –∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
LEAGUES = {
    "üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞": {
        "id": 203,
        "season_id": 77142,
        "teams": {
            "–î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞": 2315,
            "–ê–∫—Ä–æ–Ω –¢–æ–ª—å—è—Ç—Ç–∏": 285689,
            "–õ–æ–∫–æ–º–æ—Ç–∏–≤ –ú–æ—Å–∫–≤–∞": 2320,
            "–°–ø–∞—Ä—Ç–∞–∫ –ú–æ—Å–∫–≤–∞": 2323,
            "–ü–∞—Ä–∏ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": 201654,
            "–ó–µ–Ω–∏—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2321,
            "–ê—Ö–º–∞—Ç –ì—Ä–æ–∑–Ω—ã–π": 5131,
            "–û—Ä–µ–Ω–±—É—Ä–≥": 24118,
            "–ö—Ä—ã–ª—å—è –°–æ–≤–µ—Ç–æ–≤ –°–∞–º–∞—Ä–∞": 2322,
            "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": 34425,
            "–°–æ—á–∏": 2334,
            "–¶–°–ö–ê –ú–æ—Å–∫–≤–∞": 2325,
            "–†—É–±–∏–Ω –ö–∞–∑–∞–Ω—å": 2333,
            "–†–æ—Å—Ç–æ–≤": 2326,
            "–ë–∞–ª—Ç–∏–∫–∞ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": 7517,
            "–î–∏–Ω–∞–º–æ –ú–∞—Ö–∞—á–∫–≤–∞–ª–∞": 362016
        }
    },
    "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞": {
        "id": 17,
        "season_id": 76986,
        "teams": {
            "–õ–∏–≤–µ—Ä–ø—É–ª—å": 44,
            "–ë–æ—Ä–Ω–º—É—Ç": 60,
            "–ù—å—é–∫–∞—Å–ª –Æ–Ω–∞–π—Ç–µ–¥": 39,
            "–ê—Å—Ç–æ–Ω –í–∏–ª–ª–∞": 40,
            "–ë—Ä–∞–π—Ç–æ–Ω": 30,
            "–§—É–ª—Ö—ç–º": 43,
            "–ù–æ—Ç—Ç–∏–Ω–≥–µ–º –§–æ—Ä–µ—Å—Ç": 14,
            "–ë—Ä–µ–Ω—Ç—Ñ–æ—Ä–¥": 50,
            "–í–µ—Å—Ç –•—ç–º –Æ–Ω–∞–π—Ç–µ–¥": 37,
            "–°–∞–Ω–¥–µ—Ä–ª–µ–Ω–¥": 41,
            "–ë–µ—Ä–Ω–ª–∏": 6,
            "–¢–æ—Ç—Ç–µ–Ω—Ö—ç–º –•–æ—Ç—Å–ø—É—Ä": 33,
            "–í—É–ª–≤–µ—Ä—Ö—ç–º–ø—Ç–æ–Ω": 3,
            "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏": 17,
            "–ö—Ä–∏—Å—Ç–∞–ª –ü—ç–ª–∞—Å": 7,
            "–ß–µ–ª—Å–∏": 38,
            "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥": 35,
            "–ê—Ä—Å–µ–Ω–∞–ª": 42,
            "–õ–∏–¥—Å –Æ–Ω–∞–π—Ç–µ–¥": 34,
            "–≠–≤–µ—Ä—Ç–æ–Ω": 48
        }
    },
    "üá©üá™ –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞": {
        "id": 35,
        "season_id": 77333,
        "teams": {
            "–ë–∞–≤–∞—Ä–∏—è –ú—é–Ω—Ö–µ–Ω": 2672,
            "–†–ë –õ–µ–π–ø—Ü–∏–≥": 36360,
            "–í–µ—Ä–¥–µ—Ä –ë—Ä–µ–º–µ–Ω": 2534,
            "–ê–π–Ω—Ç—Ä–∞—Ö—Ç –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç": 2674,
            "–£–Ω–∏–æ–Ω –ë–µ—Ä–ª–∏–Ω": 2547,
            "–®—Ç—É—Ç–≥–∞—Ä—Ç": 2677,
            "–ë–æ—Ä—É—Å—Å–∏—è –ú—ë–Ω—Ö–µ–Ω–≥–ª–∞–¥–±–∞—Ö": 2527,
            "–ì–∞–º–±—É—Ä–≥": 2676,
            "–°–∞–Ω–∫—Ç-–ü–∞—É–ª–∏": 2526,
            "–ë–æ—Ä—É—Å—Å–∏—è –î–æ—Ä—Ç–º—É–Ω–¥": 2673,
            "–•–æ—Ñ—Ñ–µ–Ω—Ö–∞–π–º": 2569,
            "–ë–∞–π–µ—Ä –õ–µ–≤–µ—Ä–∫—É–∑–µ–Ω": 2681,
            "–ú–∞–π–Ω—Ü": 2556,
            "–ö—ë–ª—å–Ω": 2671,
            "–í–æ–ª—å—Ñ—Å–±—É—Ä–≥": 2524,
            "–•–∞–π–¥–µ–Ω—Ö–∞–π–º": 5885,
            "–§—Ä–∞–π–±—É—Ä–≥": 2538,
            "–ê—É–≥—Å–±—É—Ä–≥": 2600
        }
    },
    "üá´üá∑ –õ–∏–≥–∞ 1": {
        "id": 34,
        "season_id": 77356,
        "teams": {
            "–õ–∏–ª–ª—å": 1643,
            "–ë—Ä–µ—Å—Ç": 1715,
            "–ê–Ω–∂–µ": 1684,
            "–ü–∞—Ä–∏": 6070,
            "–û—Å–µ—Ä": 1646,
            "–õ–æ—Ä—å—è–Ω": 1656,
            "–ù–∏—Ü—Ü–∞": 1661,
            "–¢—É–ª—É–∑–∞": 1681,
            "–ü–∞—Ä–∏ –°–µ–Ω-–ñ–µ—Ä–º–µ–Ω": 1644,
            "–ù–∞–Ω—Ç": 1647,
            "–ú–æ–Ω–∞–∫–æ": 1653,
            "–ì–∞–≤—Ä": 1662,
            "–ú–∞—Ä—Å–µ–ª—å": 1641,
            "–†–µ–Ω–Ω": 1658,
            "–ú–µ—Ü": 1651,
            "–°—Ç—Ä–∞—Å–±—É—Ä": 1659,
            "–õ–∞–Ω—Å": 1648,
            "–õ–∏–æ–Ω": 1649
        }
    },
    "üáÆüáπ –°–µ—Ä–∏—è –ê": {
        "id": 23,
        "season_id": 76457,
        "teams": {
            "–¢–æ—Ä–∏–Ω–æ": 2696,
            "–ò–Ω—Ç–µ—Ä": 2697,
            "–õ–µ—á—á–µ": 2689,
            "–î–∂–µ–Ω–æ–∞": 2713,
            "–õ–∞—Ü–∏–æ": 2699,
            "–ö–æ–º–æ": 2704,
            "–Æ–≤–µ–Ω—Ç—É—Å": 2687,
            "–ü–∞—Ä–º–∞": 2690,
            "–§–∏–æ—Ä–µ–Ω—Ç–∏–Ω–∞": 2693,
            "–ö–∞–ª—å—è—Ä–∏": 2719,
            "–ë–æ–ª–æ–Ω—å—è": 2685,
            "–†–æ–º–∞": 2702,
            "–ù–∞–ø–æ–ª–∏": 2714,
            "–°–∞—Å—Å—É–æ–ª–æ": 2793,
            "–£–¥–∏–Ω–µ–∑–µ": 2695,
            "–í–µ—Ä–æ–Ω–∞": 2701,
            "–ú–∏–ª–∞–Ω": 2692,
            "–ö—Ä–µ–º–æ–Ω–µ–∑–µ": 2761,
            "–ê—Ç–∞–ª–∞–Ω—Ç–∞": 2686,
            "–ü–∏–∑–∞": 2737
        }
    },
    "üá™üá∏ –õ–∞ –õ–∏–≥–∞": {
        "id": 8,
        "season_id": 77559,
        "teams": {
            "–õ–µ–≤–∞–Ω—Ç–µ": 2849,
            "–ê–ª–∞–≤–µ—Å": 2885,
            "–ê—Ç–ª–µ—Ç–∏–∫ –ë–∏–ª—å–±–∞–æ": 2825,
            "–°–µ–≤–∏–ª—å—è": 2833,
            "–°–µ–ª—å—Ç–∞": 2821,
            "–•–µ—Ç–∞—Ñ–µ": 2859,
            "–†–µ–∞–ª –ë–µ—Ç–∏—Å": 2816,
            "–≠–ª—å—á–µ": 2846,
            "–≠—Å–ø–∞–Ω—å–æ–ª": 2814,
            "–ê—Ç–ª–µ—Ç–∏–∫–æ –ú–∞–¥—Ä–∏–¥": 2836,
            "–†–∞–π–æ –í–∞–ª—å–µ–∫–∞–Ω–æ": 2818,
            "–ñ–∏—Ä–æ–Ω–∞": 24264,
            "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": 2817,
            "–ú–∞–ª—å–æ—Ä–∫–∞": 2826,
            "–û—Å–∞—Å—É–Ω–∞": 2820,
            "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥": 2829,
            "–†–µ–∞–ª –°–æ—Å—å–µ–¥–∞–¥": 2824,
            "–í–∞–ª–µ–Ω—Å–∏—è": 2828,
            "–í–∏–ª—å—è—Ä—Ä–µ–∞–ª": 2819,
            "–û–≤—å–µ–¥–æ": 2851
        }
    }
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
MAIN_CATEGORIES = {
    "üìä –û–±—â–∏–π –æ–±–∑–æ—Ä": "overview",
    "‚öΩ –ê—Ç–∞–∫–∞ –∏ –≥–æ–ª—ã": "attack", 
    "üõ°Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏": "stats",
    "üìà –§–æ—Ä–º–∞ –∏ H2H": "form_h2h",
    "üí∞ –ü—Ä–æ–≥–Ω–æ–∑—ã": "predictions",
    "‚≠ê –ò–≥—Ä–æ–∫–∏": "players",
    "üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç": "full_report"
}

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
SUB_CATEGORIES = {
    "overview": {
        "üìä –í–µ—Å—å —Ä–∞–∑–¥–µ–ª '–û–±–∑–æ—Ä'": "overview_all",
        "üìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞": "overview_summary",
        "üéØ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": "overview_key_metrics",
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–≤–æ–¥—ã": "overview_quick_insights"
    },
    "attack": {
        "‚öΩ –í–µ—Å—å —Ä–∞–∑–¥–µ–ª '–ê—Ç–∞–∫–∞'": "attack_all",
        "‚öΩ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": "attack_goals", 
        "üéØ xG –∏ —É–¥–∞—Ä—ã": "attack_shots",
        "üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": "attack_efficiency",
        "üîÑ –ö—Ä–æ—Å—Å—ã –∏ —Ñ–ª–∞–Ω–≥–∏": "attack_crosses",        
        "üéØ –î–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏": "attack_longballs",    
    },
    "stats": {
        "üõ°Ô∏è –í–µ—Å—å —Ä–∞–∑–¥–µ–ª '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'": "stats_all",
        "‚öñÔ∏è –í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º": "stats_possession",
        "üìä –ü–∞—Å—ã": "stats_passing",
        "üü® –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞": "stats_discipline", 
        "üü® –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å": "stats_aggression",
    },
    "form_h2h": {
        "üìà –í–µ—Å—å —Ä–∞–∑–¥–µ–ª '–§–æ—Ä–º–∞'": "form_h2h_all",
        "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏": "form_recent",
        "ü§ù H2H –∏—Å—Ç–æ—Ä–∏—è": "form_h2h",
        "üè† –î–æ–º–∞/–≤ –≥–æ—Å—Ç—è—Ö": "form_home_away"
    },
    "predictions": {
        "üí∞ –í–µ—Å—å —Ä–∞–∑–¥–µ–ª '–ü—Ä–æ–≥–Ω–æ–∑—ã'": "predictions_all",
        "üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏": "predictions_probabilities",
        "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "predictions_recommendations",
        "üîç –ò–Ω—Å–∞–π—Ç—ã": "predictions_insights",
        "üü® –ö–∞—Ä—Ç–æ—á–∫–∏": "predictions_cards",
        "üè† –î–æ–º–∞/–≤ –≥–æ—Å—Ç—è—Ö": "predictions_home_away"
    },
    "players": {
        "‚≠ê –í–µ—Å—å —Ä–∞–∑–¥–µ–ª '–ò–≥—Ä–æ–∫–∏'": "players_all",
        "üë• –ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏": "players_key",
        "‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—è": "players_matchups"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
MAIN_KEYBOARD = [
    ["üèüÔ∏è –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"]
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    welcome_text = """
üèüÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π

–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

–ù–∞–∂–º–∏—Ç–µ "üèüÔ∏è –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞ –∏–ª–∏ "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É" –¥–ª—è –≤—ã—Ö–æ–¥–∞.
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(
            MAIN_KEYBOARD,
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    
    return ConversationHandler.END

async def start_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞"""
    if update.message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É":
        return await cancel(update, context)
    
    welcome_text = """
üèüÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ª–∏–≥–∞–º–∏
    league_buttons = [list(LEAGUES.keys())[i:i+2] for i in range(0, len(LEAGUES), 2)]
    reply_keyboard = league_buttons
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, 
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return SELECT_LEAGUE

async def select_league(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏–≥–∏"""
    selected_league = update.message.text
    
    if selected_league not in LEAGUES:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_LEAGUE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–≥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['league'] = selected_league
    context.user_data['tournament_id'] = LEAGUES[selected_league]['id']
    context.user_data['season_id'] = LEAGUES[selected_league]['season_id']
    context.user_data['teams'] = LEAGUES[selected_league]['teams']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏–≥–∏
    team_buttons = [list(LEAGUES[selected_league]['teams'].keys())[i:i+3] for i in range(0, len(LEAGUES[selected_league]['teams']), 3)]
    
    await update.message.reply_text(
        f"üèÜ –õ–∏–≥–∞: {selected_league}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ö–æ–∑—è–µ–≤:",
        reply_markup=ReplyKeyboardMarkup(
            team_buttons,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return SELECT_HOME_TEAM

async def select_home_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã —Ö–æ–∑—è–µ–≤"""
    home_team = update.message.text
    teams = context.user_data['teams']
    
    if home_team not in teams:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_HOME_TEAM
    
    context.user_data['home_team'] = home_team
    context.user_data['home_team_id'] = teams[home_team]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã (–∏—Å–∫–ª—é—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é)
    other_teams = [team for team in teams.keys() if team != home_team]
    away_buttons = [other_teams[i:i+2] for i in range(0, len(other_teams), 2)]
    
    await update.message.reply_text(
        f"üèÜ –õ–∏–≥–∞: {context.user_data['league']}\n"
        f"üè† –•–æ–∑—è–µ–≤–∞: {home_team}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≥–æ—Å—Ç–µ–π:",
        reply_markup=ReplyKeyboardMarkup(
            away_buttons,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return SELECT_AWAY_TEAM

async def select_away_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Å—Ç–µ–π"""
    away_team = update.message.text
    teams = context.user_data['teams']
    
    if away_team not in teams:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_AWAY_TEAM
    
    context.user_data['away_team'] = away_team
    context.user_data['away_team_id'] = teams[away_team]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_buttons = [list(MAIN_CATEGORIES.keys())[i:i+2] for i in range(0, len(MAIN_CATEGORIES), 2)]
    
    await update.message.reply_text(
        f"üèÜ –õ–∏–≥–∞: {context.user_data['league']}\n"
        f"üè† –•–æ–∑—è–µ–≤–∞: {context.user_data['home_team']}\n"
        f"üõ¨ –ì–æ—Å—Ç–∏: {away_team}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=ReplyKeyboardMarkup(
            category_buttons,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return SELECT_MAIN_CATEGORY

async def select_main_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    selected_category = update.message.text
    
    if selected_category not in MAIN_CATEGORIES:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_MAIN_CATEGORY
    
    category_key = MAIN_CATEGORIES[selected_category]
    context.user_data['selected_main_category'] = category_key
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    if category_key == "full_report":
        return await get_analysis(update, context, "all")
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    sub_categories = SUB_CATEGORIES.get(category_key, {})
    sub_buttons = [list(sub_categories.keys())[i:i+2] for i in range(0, len(sub_categories), 2)]
    
    await update.message.reply_text(
        f"üìÇ –†–∞–∑–¥–µ–ª: {selected_category}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(
            sub_buttons,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return SELECT_SUB_CATEGORY

async def select_sub_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    selected_sub = update.message.text
    main_category = context.user_data['selected_main_category']
    
    sub_categories = SUB_CATEGORIES.get(main_category, {})
    
    if selected_sub not in sub_categories:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_SUB_CATEGORY
    
    data_type = sub_categories[selected_sub]
    return await get_analysis(update, context, data_type)

async def get_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, data_type: str = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        if not data_type:
            selected_data_type = update.message.text
            data_type = "all"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        league = context.user_data['league']
        home_team = context.user_data['home_team']
        away_team = context.user_data['away_team']
        home_team_id = context.user_data['home_team_id']
        away_team_id = context.user_data['away_team_id']
        tournament_id = context.user_data['tournament_id']
        season_id = context.user_data['season_id']
        
        await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
        old_stdout = sys.stdout
        new_stdout = io.StringIO()
        sys.stdout = new_stdout
        
        try:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª –∏–≥—Ä–æ–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if data_type in ["players_all", "players_key"]:
                async with AdvancedFootballAnalyzer() as analyzer:
                    await analyzer.get_players_analysis(
                        team1_id=home_team_id,
                        team2_id=away_team_id,
                        team1_name=home_team,
                        team2_name=away_team,
                        tournament_id=tournament_id,
                        season_id=season_id
                    )
            else:
                # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                async with AdvancedFootballAnalyzer() as analyzer:
                    await analyzer.get_match_analysis(
                        team1_id=home_team_id,
                        team2_id=away_team_id,
                        team1_name=home_team,
                        team2_name=away_team,
                        tournament_id=tournament_id,
                        season_id=season_id
                    )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥
            analysis_output = new_stdout.getvalue()
            sys.stdout = old_stdout
            
            if not analysis_output or len(analysis_output.strip()) < 10:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞")
                return await show_main_menu(update, context)
            
            # –î–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if data_type in ["players_all", "players_key"]:
                header = f"üèÜ –õ–ò–ì–ê: {league}\nüèüÔ∏è –ê–ù–ê–õ–ò–ó –ú–ê–¢–ß–ê:\n{home_team} üÜö {away_team}\n\n"
                await update.message.reply_text(header + analysis_output)
            else:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
                filtered_output = filter_output(analysis_output, data_type)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                messages = split_message(filtered_output)
                
                for i, msg in enumerate(messages):
                    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if i == 0:
                        header = f"üèÜ –õ–ò–ì–ê: {league}\nüèüÔ∏è –ê–ù–ê–õ–ò–ó –ú–ê–¢–ß–ê:\n{home_team} üÜö {away_team}\n\n"
                        full_msg = header + msg
                    else:
                        full_msg = msg
                        
                    await update.message.reply_text(full_msg)
                
            # –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return await show_main_menu(update, context)
            
        except Exception as e:
            sys.stdout = old_stdout
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return await show_main_menu(update, context)
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return await show_main_menu(update, context)

def filter_output(output: str, data_type: str) -> str:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö"""
    if data_type == "all":
        return output
    
    # –î–ª—è "–≤–µ—Å—å —Ä–∞–∑–¥–µ–ª" —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∫—Ü–∏–∏
    if data_type.endswith("_all"):
        main_category = data_type.replace("_all", "")
        return filter_by_main_category(output, main_category)
    
    lines = output.split('\n')
    filtered_lines = []
    
    # –í–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    include_section = False
    current_section = ""
    
    for line in lines:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
        if any(marker in line for marker in ["üéØ", "‚öΩ", "üü®", "üìä", "üõ°Ô∏è", "üìà", "üèÜ", "üí∞", "üé™", "‚≠ê", "‚öîÔ∏è", "üîë"]):
            current_section = line.strip()
            include_section = should_include_section(current_section, data_type)
        
        if include_section:
            filtered_lines.append(line)
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä
    if not filtered_lines:
        return get_brief_overview(output, data_type)
    
    return '\n'.join(filtered_lines)

def filter_by_main_category(output: str, main_category: str) -> str:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    lines = output.split('\n')
    filtered_lines = []
    
    include_section = False
    current_section = ""
    
    for line in lines:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
        if any(marker in line for marker in ["üéØ", "‚öΩ", "üü®", "üìä", "üõ°Ô∏è", "üìà", "üèÜ", "üí∞", "üé™", "‚≠ê", "‚öîÔ∏è", "üîë"]):
            current_section = line.strip()
            include_section = should_include_main_category(current_section, main_category)
        
        if include_section:
            filtered_lines.append(line)
    
    return '\n'.join(filtered_lines) if filtered_lines else get_brief_overview(output, main_category)

def should_include_main_category(section_line: str, main_category: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Å–µ–∫—Ü–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_mapping = {
        "overview": ["üè†", "üõ¨", "üìç", "üèÜ –ü–û–ó–ò–¶–ò–Ø", "‚ö° –ë–´–°–¢–†–´–ï", "üéØ –ö–õ–Æ–ß–ï–í–´–ï"],
        "attack": ["‚öΩ", "üéØ –£–î–ê–†–´", "üìà –†–ï–ê–õ–¨–ù–´–ô xG", "üéØ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨", 
                   "üèπ –ê–¢–ê–ö–£–ï–¢", "üîÑ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –§–õ–ê–ù–ì–û–í", "üéØ –î–ê–õ–¨–ù–ò–ï –ê–¢–ê–ö–ò"],
        "stats": ["üìä –ö–û–ù–¢–†–û–õ–¨", "üîÑ –¢–û–ß–ù–û–°–¢–¨", "üõ°Ô∏è –û–ë–û–†–û–ù–ê", "üé™ –ö–ê–ß–ï–°–¢–í–û", 
                  "üü® –î–ò–°–¶–ò–ü–õ–ò–ù–ê", "üü® –ê–ì–†–ï–°–°–ò–í–ù–û–°–¢–¨"],
        "form_h2h": ["üìà –§–û–†–ú–ê", "ü§ù –í–°–ï–ì–û –ú–ê–¢–ß–ï–ô", "üìä –ò–°–¢–û–†–ò–Ø", "üìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò"],
        "predictions": ["üèÜ –ü–†–û–ì–ù–û–ó", "üí∞ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", "üìà –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´", 
                       "üé≤ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´"],
        "players": ["‚≠ê –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê", "üîë –ö–õ–Æ–ß–ï–í–´–ï –ò–ì–†–û–ö–ò"],
    }
    
    markers = category_mapping.get(main_category, [])
    return any(marker in section_line for marker in markers)

def should_include_section(section_line: str, data_type: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Å–µ–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö"""
    section_mapping = {
        # –û–±—â–∏–π –æ–±–∑–æ—Ä
        "overview_summary": ["üè†", "üõ¨", "üìç", "‚öΩ", "ü•Ö", "üéØ", "‚öñÔ∏è", "üìä", "üü®", "üìà"],
        "overview_key_metrics": ["üéØ –ö–õ–Æ–ß–ï–í–´–ï", "‚ö° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê"],
        "overview_quick_insights": ["‚ö° –ë–´–°–¢–†–´–ï", "üéØ –í–´–í–û–î–´"],
        
        # –ê—Ç–∞–∫–∞
        "attack_goals": ["‚öΩ", "–†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨", "–ì–û–õ–û–í"],
        "attack_shots": ["üéØ", "–£–î–ê–†–´", "xG"],
        "attack_efficiency": ["–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨", "–¢–û–ß–ù–û–°–¢–¨"],
        "attack_crosses": ["üîÑ", "–ê–ö–¢–ò–í–ù–û–°–¢–¨ –§–õ–ê–ù–ì–û–í", "–ö–†–û–°–°–û–í"],
        "attack_longballs": ["üéØ", "–î–ê–õ–¨–ù–ò–ï –ê–¢–ê–ö–ò", "–î–õ–ò–ù–ù–´–• –ü–ï–†–ï–î–ê–ß"],
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        "stats_possession": ["‚öñÔ∏è", "–í–õ–ê–î–ï–ù–ò–ï", "–ö–û–ù–¢–†–û–õ–¨"],
        "stats_passing": ["üìä", "–ü–ê–°–´", "–ü–ï–†–ï–î–ê–ß–ò"],
        "stats_discipline": ["üü®", "–î–ò–°–¶–ò–ü–õ–ò–ù–ê", "–ö–ê–†–¢–û–ß–ö–ò"],
        "stats_aggression": ["üü®", "–ê–ì–†–ï–°–°–ò–í–ù–û–°–¢–¨", "–§–û–õ–û–í"],
        
        # –§–æ—Ä–º–∞ –∏ H2H
        "form_recent": ["üìÖ", "–ü–û–°–õ–ï–î–ù–ò–ï", "–§–û–†–ú–ê"],
        "form_h2h": ["ü§ù", "H2H", "–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï"],
        "form_home_away": ["üè†", "–î–û–ú–ê–®–ù–ò–ï/–ì–û–°–¢–ï–í–´–ï"],
        
        # –ü—Ä–æ–≥–Ω–æ–∑—ã
        "predictions_probabilities": ["üéØ", "–í–ï–†–û–Ø–¢–ù–û–°–¢–ò", "–ü–†–û–ì–ù–û–ó"],
        "predictions_recommendations": ["üí°", "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"],
        "predictions_insights": ["üîç", "–ò–ù–°–ê–ô–¢–´", "–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´"],
        "predictions_cards": ["üé≤ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´", "üü® –ê–ù–ê–õ–ò–ó –î–ò–°–¶–ò–ü–õ–ò–ù–´", "–†–µ—Ñ–µ—Ä–∏", "–ü—Ä–æ–≥–Ω–æ–∑ –∂–µ–ª—Ç—ã—Ö"],
        "predictions_home_away": ["üé≤ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´", "üè†üõ¨ –ü–†–û–ì–ù–û–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê", "–î–û–ú–ê–®–ù–ï–ì–û –°–¢–ê–î–ò–û–ù–ê", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–æ–≤"],
        
        # –ò–≥—Ä–æ–∫–∏
        "players_key": ["‚≠ê –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê", "üîë –ö–õ–Æ–ß–ï–í–´–ï –ò–ì–†–û–ö–ò"],
        "players_matchups": ["‚öîÔ∏è", "–ü–†–û–¢–ò–í–û–°–¢–û–Ø–ù–ò–Ø"]
    }
    
    markers = section_mapping.get(data_type, [])
    return any(marker in section_line for marker in markers)

def get_brief_overview(output: str, data_type: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—É—Å—Ç–æ–π"""
    lines = output.split('\n')
    overview = []
    
    # –î–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    if "players" in data_type:
        for line in lines:
            if any(marker in line for marker in ["‚≠ê", "üîë", "‚öîÔ∏è", "–ö–õ–Æ–ß–ï–í–´–ï –ò–ì–†–û–ö–ò", "–ì–æ–ª—ã:", "–ê—Å—Å–∏—Å—Ç—ã:", "–£–¥–∞—Ä—ã:"]):
                overview.append(line)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not overview and "players" in data_type:
        return "‚≠êÔ∏è –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –ö–õ–Æ–ß–ï–í–´–• –ò–ì–†–û–ö–û–í:\n\nüîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 3-—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤"
    
    return '\n'.join(overview) if overview else "üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
def split_message(text: str, max_length: int = 4000) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while len(text) > max_length:
        split_pos = text.rfind('\n', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()
    
    if text:
        parts.append(text)
    
    return parts

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    await update.message.reply_text(
        "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Ç—á?",
        reply_markup=ReplyKeyboardMarkup(
            MAIN_KEYBOARD,
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await update.message.reply_text(
        "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞! –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Text(["üèüÔ∏è –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞"]), start_analysis)
        ],
        states={
            SELECT_LEAGUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_league)
            ],
            SELECT_HOME_TEAM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_home_team)
            ],
            SELECT_AWAY_TEAM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_away_team)
            ],
            SELECT_MAIN_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_main_category)
            ],
            SELECT_SUB_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_sub_category)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Text(["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"]), cancel),
            CommandHandler('start', start)
        ],
    )
    
    application.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Text(["üèüÔ∏è –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞"]), start_analysis))
    application.add_handler(MessageHandler(filters.Text(["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"]), cancel))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()