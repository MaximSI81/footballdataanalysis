from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from football_match_forecast import AdvancedFootballAnalyzer
import io
import sys
import os
import asyncio
from dotenv import load_dotenv

load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECT_HOME_TEAM, SELECT_AWAY_TEAM, SELECT_DATA_TYPES = range(3)

# –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥
TEAMS = {
    "–î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞": 2315,
    "–ê–∫—Ä–æ–Ω –¢–æ–ª—å—è—Ç—Ç–∏": 285689,
    "–õ–æ–∫–æ–º–æ—Ç–∏–≤ –ú–æ—Å–∫–≤–∞": 2320,
    "–°–ø–∞—Ä—Ç–∞–∫ –ú–æ—Å–∫–≤–∞": 2323,
    "–ü–∞—Ä–∏ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": 201654,
    "–ó–µ–Ω–∏—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2321,
    "–ê—Ö–º–∞—Ç –ì—Ä–æ–∑–Ω—ã–π": 5131,
    "–û—Ä–µ–Ω–±—É—Ä–≥": 24118,
    "–ö—Ä—ã–ª—å—è –°–æ–≤–µ—Ç–æ–≤ –°–∞–º–∞—Ä–∞": 2322,
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": 34425,
    "–°–æ—á–∏": 2334,
    "–¶–°–ö–ê –ú–æ—Å–∫–≤–∞": 2325,
    "–†—É–±–∏–Ω –ö–∞–∑–∞–Ω—å": 2333,
    "–†–æ—Å—Ç–æ–≤": 2326,
    "–ë–∞–ª—Ç–∏–∫–∞ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": 7517,
    "–î–∏–Ω–∞–º–æ –ú–∞—Ö–∞—á–∫–≤–∞–ª–∞": 362016
}

# –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
DATA_TYPES = {
    "üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "basic",
    "‚öΩ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": "goals", 
    "üéØ –£–¥–∞—Ä—ã –∏ xG": "shots",
    "üü® –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞": "discipline",
    "üìà –§–æ—Ä–º–∞ –∏ H2H": "form",
    "üí∞ –ü—Ä–æ–≥–Ω–æ–∑—ã": "predictions",
    "‚≠ê –ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏": "players",
    "üìà –í—Å–µ –¥–∞–Ω–Ω—ã–µ": "all"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    welcome_text = """
üèüÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π

–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ö–æ–∑—è–µ–≤:
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–ø–æ 3 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
    team_buttons = [list(TEAMS.keys())[i:i+3] for i in range(0, len(TEAMS), 3)]
    reply_keyboard = team_buttons
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, 
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return SELECT_HOME_TEAM

async def select_home_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã —Ö–æ–∑—è–µ–≤"""
    home_team = update.message.text
    
    if home_team not in TEAMS:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_HOME_TEAM
    
    context.user_data['home_team'] = home_team
    context.user_data['home_team_id'] = TEAMS[home_team]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã (–∏—Å–∫–ª—é—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é)
    other_teams = [team for team in TEAMS.keys() if team != home_team]
    away_buttons = [other_teams[i:i+2] for i in range(0, len(other_teams), 2)]
    
    await update.message.reply_text(
        f"üè† –•–æ–∑—è–µ–≤–∞: {home_team}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≥–æ—Å—Ç–µ–π:",
        reply_markup=ReplyKeyboardMarkup(
            away_buttons,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return SELECT_AWAY_TEAM

async def select_away_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Å—Ç–µ–π"""
    away_team = update.message.text
    
    if away_team not in TEAMS:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_AWAY_TEAM
    
    context.user_data['away_team'] = away_team
    context.user_data['away_team_id'] = TEAMS[away_team]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    data_buttons = [list(DATA_TYPES.keys())[i:i+2] for i in range(0, len(DATA_TYPES), 2)]
    
    await update.message.reply_text(
        f"üè† –•–æ–∑—è–µ–≤–∞: {context.user_data['home_team']}\n"
        f"üõ¨ –ì–æ—Å—Ç–∏: {away_team}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(
            data_buttons,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return SELECT_DATA_TYPES

async def get_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞"""
    selected_data_type = update.message.text
    
    if selected_data_type not in DATA_TYPES:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_DATA_TYPES
    
    data_type = DATA_TYPES[selected_data_type]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    home_team = context.user_data['home_team']
    away_team = context.user_data['away_team']
    home_team_id = context.user_data['home_team_id']
    away_team_id = context.user_data['away_team_id']
    
    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
    
    try:
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
        old_stdout = sys.stdout
        new_stdout = io.StringIO()
        sys.stdout = new_stdout
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        async with AdvancedFootballAnalyzer() as analyzer:
            await analyzer.get_match_analysis(
                team1_id=home_team_id,
                team2_id=away_team_id,
                team1_name=home_team,
                team2_name=away_team,
                tournament_id=203,  # –†–ü–õ
                season_id=77142
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥
        analysis_output = new_stdout.getvalue()
        sys.stdout = old_stdout
        
        if not analysis_output or len(analysis_output.strip()) < 100:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞")
            return await start(update, context)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
        filtered_output = filter_output(analysis_output, data_type)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = split_message(filtered_output)
        
        for i, msg in enumerate(messages):
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if i == 0:
                header = f"üèüÔ∏è –ê–ù–ê–õ–ò–ó –ú–ê–¢–ß–ê:\n{home_team} üÜö {away_team}\n\n"
                full_msg = header + msg
            else:
                full_msg = msg
                
            await update.message.reply_text(full_msg)
            
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        team_buttons = [list(TEAMS.keys())[i:i+2] for i in range(0, len(TEAMS), 2)]
        await update.message.reply_text(
            "üîÑ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Ç—á? –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ö–æ–∑—è–µ–≤:",
            reply_markup=ReplyKeyboardMarkup(
                team_buttons,
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        
        return SELECT_HOME_TEAM
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        return await start(update, context)

def filter_output(output: str, data_type: str) -> str:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö"""
    if data_type == "all":
        return output
    
    lines = output.split('\n')
    filtered_lines = []
    
    # –í–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    include_section = False
    current_section = ""
    
    for line in lines:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
        if any(marker in line for marker in ["üéØ", "‚öΩ", "üü®", "üìä", "üõ°Ô∏è", "üìà", "üèÜ", "üí∞", "üé™", "‚≠ê", "‚öîÔ∏è", "üîë"]):
            current_section = line.strip()
            include_section = should_include_section(current_section, data_type)
        
        if include_section:
            filtered_lines.append(line)
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä
    if not filtered_lines:
        return get_brief_overview(output)
    
    return '\n'.join(filtered_lines)

def should_include_section(section_line: str, data_type: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Å–µ–∫—Ü–∏—é"""
    section_mapping = {
        "basic": ["üè†", "‚öΩ", "üéØ", "üü®", "üìä", "üõ°Ô∏è", "üîÑ", "üé™", "üèπ"],
        "goals": ["‚öΩ", "–†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨", "xG", "–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨", "–ì–û–õ–û–í"],
        "shots": ["üéØ", "–£–î–ê–†–´", "xG", "–£–ì–õ–û–í–´–ï", "–°–¢–ê–ù–î–ê–†–¢–ù–´–ï", "–ö–ê–ß–ï–°–¢–í–û –ú–û–ú–ï–ù–¢–û–í"],
        "discipline": ["üü®", "–î–ò–°–¶–ò–ü–õ–ò–ù–ê", "–§–û–õ–´", "–ö–ê–†–¢–û–ß–ö–ò"],
        "form": ["üìà", "–§–û–†–ú–ê", "H2H", "–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï", "–î–û–ú–ê–®–ù–ò–ï/–ì–û–°–¢–ï–í–´–ï", "ü§ù", "üìä"],
        "predictions": ["üèÜ", "üí∞", "üéØ", "–ü–†–û–ì–ù–û–ó", "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", "–†–´–ù–ö–ò", "–ò–ù–°–ê–ô–¢–´", "üìà –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´"],
        "players": ["‚≠ê", "üîë", "‚öîÔ∏è", "–ö–õ–Æ–ß–ï–í–´–ï –ò–ì–†–û–ö–ò", "–ü–†–û–ì–†–ï–°–°", "–ü–†–û–¢–ò–í–û–°–¢–û–Ø–ù–ò–Ø"]
    }
    
    markers = section_mapping.get(data_type, [])
    return any(marker in section_line for marker in markers)

def get_brief_overview(output: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—É—Å—Ç–æ–π"""
    lines = output.split('\n')
    overview = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    key_phrases = [
        "–ü–û–ó–ò–¶–ò–Ø –í –¢–ê–ë–õ–ò–¶–ï", "–†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨", "–ì–û–õ–û–í –ó–ê –ú–ê–¢–ß", 
        "xG", "–ü–†–û–ì–ù–û–ó", "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", "–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´"
    ]
    
    for line in lines:
        if any(phrase in line for phrase in key_phrases):
            overview.append(line)
        elif line.startswith("üéØ") or line.startswith("‚öΩ") or line.startswith("üí∞"):
            overview.append(line)
    
    return '\n'.join(overview) if overview else output[:2000] + "\n\n... (–≤—ã–≤–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω)"

def split_message(text: str, max_length: int = 4000) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while len(text) > max_length:
        split_pos = text.rfind('\n', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()
    
    if text:
        parts.append(text)
    
    return parts

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_HOME_TEAM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_home_team)
            ],
            SELECT_AWAY_TEAM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_away_team)
            ],
            SELECT_DATA_TYPES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_analysis)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()