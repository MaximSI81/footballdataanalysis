import pandas as pd
from clickhouse_driver import Client
import os
import asyncio
from typing import Dict, Any, List, Tuple
from datetime import datetime, timedelta



class PlayersAnalyzer:
    def __init__(self):
        self.ch_client = None
    
    async def __aenter__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        self.ch_client = Client(
            host='localhost',
            user='username', 
            password='password',
            database='football_db'
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if self.ch_client:
            self.ch_client.disconnect()
    
    async def get_team_compact_dashboard(self, team_id: int, team_name: str, season_id: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
            players_data = await self._get_team_players_with_form(team_id, season_id)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ–æ—Ä–º—É
            position_groups = self._group_players_by_position(players_data)
            overall_form = self._calculate_overall_form(players_data)
            
            return {
                'team_name': team_name,
                'overall_form': overall_form,
                'positions': position_groups
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è {team_name}: {e}")
            return {}
    
    async def _get_team_players_with_form(self, team_id: int, season_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ä–º—ã (—Ç–æ–ª—å–∫–æ —Å—ã–≥—Ä–∞–≤—à–∏–µ > 0 –º–∏–Ω—É—Ç)"""
        try:
            query = """
            SELECT 
                player_id, player_name, position, 
                AVG(rating) as avg_rating,
                SUM(goals) as total_goals,
                SUM(goal_assist) as total_assists,
                AVG(total_shot) as avg_shots,
                AVG(pass_accuracy) as pass_accuracy,
                AVG(duel_won * 100.0 / NULLIF(duel_won + duel_lost, 0)) as duel_success,
                AVG(saves) as avg_saves,
                COUNT(*) as matches_played,
                AVG(minutes_played) as avg_minutes
            FROM football_player_stats 
            WHERE team_id = %(team_id)s 
            AND match_id IN (
                SELECT match_id FROM football_matches 
                WHERE season_id = %(season_id)s AND status = 'Ended'
            )
            AND minutes_played > 0  # –¢–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –≤—ã—Ö–æ–¥–∏–ª –Ω–∞ –ø–æ–ª–µ
            GROUP BY player_id, player_name, position
            HAVING COUNT(*) >= 1  # –•–æ—Ç—è –±—ã 1 –º–∞—Ç—á —Å –º–∏–Ω—É—Ç–∞–º–∏
            ORDER BY avg_rating DESC
            """
            
            results = self.ch_client.execute(query, {'team_id': team_id, 'season_id': season_id})
            
            players = []
            for row in results:
                player_id, name, position, rating, goals, assists, shots, pass_acc, duels, saves, matches, avg_minutes = row
                
                # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã
                form_trend = await self._calculate_player_trend(player_id, season_id)
                
                players.append({
                    'id': player_id,
                    'name': name,
                    'position': position,
                    'rating': round(rating, 1),
                    'goals': goals or 0,
                    'assists': assists or 0,
                    'shots': round(shots or 0, 1),
                    'pass_accuracy': round(pass_acc or 0, 0),
                    'duel_success': round(duels or 0, 0),
                    'saves': round(saves or 0, 1),
                    'form_trend': form_trend,
                    'matches': matches,
                    'avg_minutes': round(avg_minutes or 0, 0)
                })
            
            return players
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: {e}")
            return []
    
    async def _calculate_player_trend(self, player_id: int, season_id: int) -> Dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞"""
        try:
            query = """
            SELECT rating, match_date
            FROM football_player_stats fps
            JOIN football_matches fm ON fps.match_id = fm.match_id
            WHERE fps.player_id = %(player_id)s 
            AND fm.season_id = %(season_id)s
            AND fps.minutes_played > 0
            ORDER BY fm.match_date DESC
            LIMIT 5
            """
            
            results = self.ch_client.execute(query, {'player_id': player_id, 'season_id': season_id})
            
            if len(results) < 3:
                return {'percent': 0, 'direction': 'stable', 'icon': 'üü°'}
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∞—Ç—á–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 2
            recent_matches = [row[0] for row in results[:3]]
            older_matches = [row[0] for row in results[3:5]]
            
            if not recent_matches:
                return {'percent': 0, 'direction': 'stable', 'icon': 'üü°'}
            
            recent_avg = sum(recent_matches) / len(recent_matches)
            
            if older_matches:
                older_avg = sum(older_matches) / len(older_matches)
                trend_percent = ((recent_avg - older_avg) / older_avg) * 100 if older_avg > 0 else 0
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                trend_percent = 0
            
            # –ü–æ—Ä–æ–≥–∏ —Ç—Ä–µ–Ω–¥–∞
            if trend_percent > 8:
                icon = 'üü¢'
                direction = 'up'
            elif trend_percent < -8:
                icon = 'üî¥' 
                direction = 'down'
            else:
                icon = 'üü°'
                direction = 'stable'
            
            return {
                'percent': round(trend_percent, 0),
                'direction': direction,
                'icon': icon
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return {'percent': 0, 'direction': 'stable', 'icon': 'üü°'}
    
    def _group_players_by_position(self, players: List[Dict]) -> Dict[str, List]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        positions = {
            'forwards': [],
            'midfielders': [],
            'defenders': [],
            'goalkeepers': []
        }
        
        position_mapping = {
            'G': 'goalkeepers',
            'D': 'defenders', 
            'M': 'midfielders',
            'F': 'forwards'
        }
        
        for player in players:
            pos_char = player['position'][0] if player['position'] else 'M'
            category = position_mapping.get(pos_char, 'midfielders')
            positions[category].append(player)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in positions:
            positions[category].sort(key=lambda x: x['rating'], reverse=True)
        
        return positions
    
    def _calculate_overall_form(self, players: List[Dict]) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Ñ–æ—Ä–º—É –∫–æ–º–∞–Ω–¥—ã"""
        if not players:
            return {'rating': 0, 'trend': 'stable', 'icon': 'üü°'}
        
        total_rating = sum(p['rating'] for p in players)
        avg_rating = total_rating / len(players)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ç—Ä–µ–Ω–¥—É –∏–≥—Ä–æ–∫–æ–≤)
        trends = [p['form_trend']['percent'] for p in players if p.get('form_trend')]
        avg_trend = sum(trends) / len(trends) if trends else 0
        
        if avg_trend > 3:
            trend_icon = 'üü¢'
            trend_text = f"+{abs(avg_trend):.0f}%"
        elif avg_trend < -3:
            trend_icon = 'üî¥' 
            trend_text = f"-{abs(avg_trend):.0f}%"
        else:
            trend_icon = 'üü°'
            trend_text = f"{avg_trend:+.0f}%"
        
        return {
            'rating': round(avg_rating, 1),
            'trend_icon': trend_icon,
            'trend_text': trend_text
        }
    
    def format_compact_dashboard(self, team_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∞—à–±–æ—Ä–¥"""
        if not team_data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        output = []
        team_name = team_data['team_name']
        overall = team_data['overall_form']
        positions = team_data['positions']
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–∞–Ω–¥—ã
        output.append(f"üõ°Ô∏è –ö–û–ú–ê–ù–î–ê: {team_name.upper()}")
        output.append(f"–û–±—â–∞—è —Ñ–æ—Ä–º–∞: {overall['trend_icon']} {overall['rating']}/10 ({overall['trend_text']})")
        output.append("")
        
        # –ü–æ–∑–∏—Ü–∏–∏
        position_icons = {
            'forwards': '‚öΩ',
            'midfielders': 'üéØ', 
            'defenders': 'üõ°Ô∏è',
            'goalkeepers': 'ü•Ö'
        }
        
        position_names = {
            'forwards': '–ù–ê–ü–ê–î–ê–Æ–©–ò–ï',
            'midfielders': '–ü–û–õ–£–ó–ê–©–ò–¢–ù–ò–ö–ò',
            'defenders': '–ó–ê–©–ò–¢–ù–ò–ö–ò', 
            'goalkeepers': '–í–†–ê–¢–ê–†–ò'
        }
        
        for pos_key in ['forwards', 'midfielders', 'defenders', 'goalkeepers']:
            players = positions.get(pos_key, [])
            if players:
                # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
                pos_rating = sum(p['rating'] for p in players) / len(players)
                
                output.append(f"{position_icons[pos_key]} {position_names[pos_key]} ({pos_rating:.1f}/10)")
                
                for player in players:
                    trend = player['form_trend']
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
                    if pos_key == 'goalkeepers':
                        line = f"{player['name']:12} ‚≠ê {player['rating']} {trend['icon']} {trend['percent']:+.0f}% | {player['saves']} —Å–µ–π–≤ | {player['pass_accuracy']}%–ø–∞—Å"
                    elif pos_key == 'defenders':
                        line = f"{player['name']:12} ‚≠ê {player['rating']} {trend['icon']} {trend['percent']:+.0f}% | {player['duel_success']}%–ï–ë | {player['shots']} –æ—Ç–±"
                    else:
                        line = f"{player['name']:12} ‚≠ê {player['rating']} {trend['icon']} {trend['percent']:+.0f}% | {player['goals']}–≥+{player['assists']}–ø | {player['shots']} —É–¥"
                    
                    output.append(line)
                
                output.append("")
        
        return "\n".join(output)
    