from sofascore_wrapper.api import SofascoreAPI
from datetime import datetime
from typing import List, Dict, Any

class FootballDataCollector:
    def __init__(self):
        self.api = None

    async def __aenter__(self):
        self.api = SofascoreAPI()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.api:
            await self.api.close()
    
    async def get_round_matches(self, tournament_id: int, season_id: int, round_number: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–∞"""
        try:
            endpoint = f"/unique-tournament/{tournament_id}/season/{season_id}/events/round/{round_number}"
            print(f"üîç API –∑–∞–ø—Ä–æ—Å: {endpoint}")
            
            data = await self.api._get(endpoint)
            
            matches_data = []
            for match in data.get('events', []):
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
                home_score = match.get('homeScore', {}).get('current')
                away_score = match.get('awayScore', {}).get('current')
                venue = match.get('venue', {}).get('name')
                
                match_info = {
                    'match_id': match['id'],
                    'tournament_id': tournament_id,
                    'season_id': season_id,
                    'round_number': round_number,
                    'match_date': datetime.fromtimestamp(match['startTimestamp']).date(),
                    'home_team_id': match['homeTeam']['id'],
                    'home_team_name': match['homeTeam']['name'],
                    'away_team_id': match['awayTeam']['id'],
                    'away_team_name': match['awayTeam']['name'],
                    'home_score': home_score if home_score is not None else 0,  # –ó–∞–º–µ–Ω—è–µ–º None
                    'away_score': away_score if away_score is not None else 0,  # –ó–∞–º–µ–Ω—è–µ–º None
                    'status': match['status']['description'],
                    'venue': venue if venue is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',  # –ó–∞–º–µ–Ω—è–µ–º None
                    'start_timestamp': datetime.fromtimestamp(match['startTimestamp'])
                }
                matches_data.append(match_info)
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(matches_data)} –º–∞—Ç—á–µ–π —Ç—É—Ä–∞ {round_number}")
            return matches_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π —Ç—É—Ä–∞ {round_number}: {e}")
            import traceback
            traceback.print_exc()
            return []
    
    async def get_player_statistics(self, match_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –º–∞—Ç—á–∞"""
        try:
            endpoint = f"/event/{match_id}/lineups"
            data = await self.api._get(endpoint)
            
            player_stats = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É
            if 'home' in data:
                player_stats.extend(self._process_team_players(data['home'], match_id))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            if 'away' in data:
                player_stats.extend(self._process_team_players(data['away'], match_id))
            
            print(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {len(player_stats)} –∏–≥—Ä–æ–∫–æ–≤ –º–∞—Ç—á–∞ {match_id}")
            return player_stats
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ {match_id}: {e}")
            return []
    
    def _process_team_players(self, team_data: Dict[str, Any], match_id: int) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        players_stats = []
        
        for player_data in team_data.get('players', []):
            # –ë–µ—Ä–µ–º teamId –¢–û–õ–¨–ö–û –∏–∑ player_data
            team_id = player_data.get('teamId')
            if team_id is None:
                player_name = player_data.get('player', {}).get('name', 'Unknown')
                print(f"‚ö†Ô∏è  –£ –∏–≥—Ä–æ–∫–∞ {player_name} –Ω–µ—Ç teamId! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
                
            stats = self._extract_player_stats(player_data, match_id, team_id)
            if stats:
                players_stats.append(stats)
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤")
        return players_stats
    

    def _extract_player_stats(self, player_data: Dict[str, Any], match_id: int, team_id: int) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        try:
            player_info = player_data.get('player', {})
            statistics = player_data.get('statistics', {})
            
            # team_id —É–∂–µ –ø—Ä–∏—à–µ–ª –∫–∞–∫ —á–∏—Å–ª–æ
            print(f"üë§ –ò–≥—Ä–æ–∫: {player_info.get('name')}, team_id={team_id}")
            
            if not player_info or not statistics:
                return None
        
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            total_passes = statistics.get('totalPass', 0)
            accurate_passes = statistics.get('accuratePass', 0)
            pass_accuracy = round((accurate_passes / total_passes * 100), 2) if total_passes > 0 else 0
            
            total_duels = statistics.get('duelWon', 0) + statistics.get('duelLost', 0)
            duel_success = round((statistics.get('duelWon', 0) / total_duels * 100), 2) if total_duels > 0 else 0
            
            total_dribbles = statistics.get('successfulDribbles', 0) + statistics.get('unsuccessfulDribbles', 0)
            dribble_success = round((statistics.get('successfulDribbles', 0) / total_dribbles * 100), 2) if total_dribbles > 0 else 0
            
            
            
            return {
                'match_id': match_id,
                'team_id': team_id,
                'player_id': player_info.get('id'),
                'player_name': player_info.get('name'),
                'short_name': player_info.get('shortName'),
                'position': player_info.get('position'),
                'jersey_number': int(player_info.get('jerseyNumber', 0)) if player_info.get('jerseyNumber') else 0,
                'minutes_played': statistics.get('minutesPlayed', 0),
                'rating': float(statistics.get('rating', 0)),
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                'goals': statistics.get('goals', 0),
                'goal_assist': statistics.get('goalAssist', 0),
                
                # –£–¥–∞—Ä—ã
                'total_shot': statistics.get('totalShot', 0),
                'on_target_shot': statistics.get('onTargetShot', 0),
                'off_target_shot': statistics.get('offTargetShot', 0),
                'blocked_scoring_attempt': statistics.get('blockedScoringAttempt', 0),
                
                # –ü–µ—Ä–µ–¥–∞—á–∏
                'total_pass': total_passes,
                'accurate_pass': accurate_passes,
                'pass_accuracy': pass_accuracy,
                'key_pass': statistics.get('keyPass', 0),
                'total_long_balls': statistics.get('totalLongBalls', 0),
                'accurate_long_balls': statistics.get('accurateLongBalls', 0),
                
                # –î—Ä–∏–±–ª–∏–Ω–≥
                'successful_dribbles': statistics.get('successfulDribbles', 0),
                'dribble_success': dribble_success,
                
                # –û–±–æ—Ä–æ–Ω–∞
                'total_tackle': statistics.get('totalTackle', 0),
                'interception_won': statistics.get('interceptionWon', 0),
                'total_clearance': statistics.get('totalClearance', 0),
                'outfielder_block': statistics.get('outfielderBlock', 0),
                'challenge_lost': statistics.get('challengeLost', 0),
                
                # –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞
                'duel_won': statistics.get('duelWon', 0),
                'duel_lost': statistics.get('duelLost', 0),
                'aerial_won': statistics.get('aerialWon', 0),
                'duel_success': duel_success,
                
                # –ü—Ä–æ—á–µ–µ
                'touches': statistics.get('touches', 0),
                'possession_lost_ctrl': statistics.get('possessionLostCtrl', 0),
                'was_fouled': statistics.get('wasFouled', 0),
                'fouls': statistics.get('fouls', 0),
                
                # –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
                'yellow_cards': statistics.get('yellowCards', 0),
                'red_cards': statistics.get('redCards', 0),
                
                # –í—Ä–∞—Ç–∞—Ä—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                'saves': statistics.get('saves', 0),
                'punches': statistics.get('punches', 0),
                'good_high_claim': statistics.get('goodHighClaim', 0),
                'saved_shots_from_inside_box': statistics.get('savedShotsFromInsideTheBox', 0),
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
