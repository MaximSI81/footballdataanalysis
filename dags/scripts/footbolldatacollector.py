from sofascore_wrapper.api import SofascoreAPI
from datetime import datetime
from typing import List, Dict, Any
import asyncio

class FootballDataCollector:
    def __init__(self):
        self.api = None

    async def __aenter__(self):
        self.api = SofascoreAPI()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.api:
            await self.api.close()

    async def collect_round_data(self, tournament_id: int, season_id: int, round_number: int) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º —Ç—É—Ä–∞"""
        try:
            print(f"\nüéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—É—Ä–∞ {round_number}")
            print("=" * 50)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ —Ç—É—Ä–∞
            matches = await self.get_round_matches(tournament_id, season_id, round_number)
            
            if not matches:
                print(f"‚ùå –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–∞ {round_number}")
                return {}
            
            round_data = {
                'tournament_id': tournament_id,
                'season_id': season_id, 
                'round_number': round_number,
                'matches': [],
                'total_matches': len(matches),
                'collected_matches': 0
            }
            
            # 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for match in matches:
                match_id = match['match_id']
                print(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á {match_id}: {match['home_team_name']} vs {match['away_team_name']}")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
                    match_complete_data = await self.get_complete_match_data(match_id)
                    
                    if match_complete_data:
                        match_data = {
                            'match_info': match,
                            'player_stats': match_complete_data['player_stats'],
                            'incidents': match_complete_data['incidents'],
                            'collected_at': datetime.now()
                        }
                        round_data['matches'].append(match_data)
                        round_data['collected_matches'] += 1
                        print(f"‚úÖ –ú–∞—Ç—á {match_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
                        
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞ {match_id}: {e}")
                    continue
            
            print(f"\nüéâ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {round_data['collected_matches']}/{round_data['total_matches']} –º–∞—Ç—á–µ–π")
            return round_data
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–∞ {round_number}: {e}")
            return {}
    
    async def get_complete_match_data(self, match_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É + –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã)"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            player_stats_task = self.get_player_statistics(match_id)
            incidents_task = self.get_match_incidents(match_id)
            
            player_stats, incidents = await asyncio.gather(
                player_stats_task, 
                incidents_task,
                return_exceptions=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
            if isinstance(player_stats, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ {match_id}: {player_stats}")
                player_stats = []
            if isinstance(incidents, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –º–∞—Ç—á–∞ {match_id}: {incidents}")
                incidents = []
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            player_stats_with_cards = self._merge_cards_with_stats(player_stats, incidents)
            
            return {
                'player_stats': player_stats_with_cards,
                'incidents': incidents,
                'match_id': match_id
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ {match_id}: {e}")
            return {}
    
    async def get_match_incidents(self, match_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –º–∞—Ç—á–∞ (–∫–∞—Ä—Ç–æ—á–∫–∏, –≥–æ–ª—ã, –∑–∞–º–µ–Ω—ã)"""
        try:
            endpoint = f"/event/{match_id}/incidents"
            print(f"üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {endpoint}")
            
            data = await self.api._get(endpoint)
            
            incidents_data = []
            for incident in data.get('incidents', []):
                incident_type = incident.get('incidentType')
                incident_class = incident.get('incidentClass')
                
                # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
                if incident_type == 'card':
                    card_data = {
                        'match_id': match_id,
                        'player_id': incident.get('player', {}).get('id'),
                        'player_name': incident.get('playerName'),
                        'team_is_home': incident.get('isHome', False),
                        'card_type': incident_class,  # 'yellow' –∏–ª–∏ 'red'
                        'reason': incident.get('reason', ''),
                        'time': incident.get('time', 0),
                        'added_time': incident.get('addedTime', 0)
                    }
                    incidents_data.append(card_data)
                    print(f"üü® –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {incident_class} - {incident.get('playerName')}")
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(incidents_data)} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
            return incidents_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –º–∞—Ç—á–∞ {match_id}: {e}")
            return []
    
    def _merge_cards_with_stats(self, player_stats: List[Dict], incidents: List[Dict]) -> List[Dict]:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö"""
        if not player_stats:
            return []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∏–≥—Ä–æ–∫—É
        cards_by_player = {}
        for incident in incidents:
            player_id = incident.get('player_id')
            if player_id:
                if player_id not in cards_by_player:
                    cards_by_player[player_id] = {'yellow': 0, 'red': 0}
                
                card_type = incident.get('card_type')
                if card_type == 'yellow':
                    cards_by_player[player_id]['yellow'] += 1
                elif card_type == 'red' or card_type == 'yellowRed':  # –î–û–ë–ê–í–¨–¢–ï yellowRed
                    cards_by_player[player_id]['red'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
        for player in player_stats:
            player_id = player.get('player_id')
            if player_id in cards_by_player:
                player['yellow_cards'] = cards_by_player[player_id]['yellow']
                player['red_cards'] = cards_by_player[player_id]['red']
            else:
                # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
                player['yellow_cards'] = 0
                player['red_cards'] = 0
        
        return player_stats

    async def get_round_matches(self, tournament_id: int, season_id: int, round_number: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–∞"""
        try:
            endpoint = f"/unique-tournament/{tournament_id}/season/{season_id}/events/round/{round_number}"
            print(f"üîç API –∑–∞–ø—Ä–æ—Å: {endpoint}")
            
            data = await self.api._get(endpoint)
            
            matches_data = []
            for match in data.get('events', []):
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π
                home_score = match.get('homeScore', {}).get('current')
                away_score = match.get('awayScore', {}).get('current')
                venue = match.get('venue', {}).get('name')
                
                match_info = {
                    'match_id': match['id'],
                    'tournament_id': tournament_id,
                    'season_id': season_id,
                    'round_number': round_number,
                    'match_date': datetime.fromtimestamp(match['startTimestamp']).date(),
                    'home_team_id': match['homeTeam']['id'],
                    'home_team_name': match['homeTeam']['name'],
                    'away_team_id': match['awayTeam']['id'],
                    'away_team_name': match['awayTeam']['name'],
                    'home_score': home_score if home_score is not None else 0,
                    'away_score': away_score if away_score is not None else 0,
                    'status': match['status']['description'],
                    'venue': venue if venue is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'start_timestamp': datetime.fromtimestamp(match['startTimestamp'])
                }
                matches_data.append(match_info)
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(matches_data)} –º–∞—Ç—á–µ–π —Ç—É—Ä–∞ {round_number}")
            return matches_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π —Ç—É—Ä–∞ {round_number}: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def get_player_statistics(self, match_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –º–∞—Ç—á–∞"""
        try:
            endpoint = f"/event/{match_id}/lineups"
            data = await self.api._get(endpoint)
            
            player_stats = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É
            if 'home' in data:
                player_stats.extend(self._process_team_players(data['home'], match_id))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            if 'away' in data:
                player_stats.extend(self._process_team_players(data['away'], match_id))
            
            print(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {len(player_stats)} –∏–≥—Ä–æ–∫–æ–≤ –º–∞—Ç—á–∞ {match_id}")
            return player_stats
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ {match_id}: {e}")
            return []
    
    def _process_team_players(self, team_data: Dict[str, Any], match_id: int) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        players_stats = []
        
        for player_data in team_data.get('players', []):
            # –ë–µ—Ä–µ–º teamId –¢–û–õ–¨–ö–û –∏–∑ player_data
            team_id = player_data.get('teamId')
            if team_id is None:
                player_name = player_data.get('player', {}).get('name', 'Unknown')
                print(f"‚ö†Ô∏è  –£ –∏–≥—Ä–æ–∫–∞ {player_name} –Ω–µ—Ç teamId! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
                
            stats = self._extract_player_stats(player_data, match_id, team_id)
            if stats:
                players_stats.append(stats)
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤")
        return players_stats
    
    def _extract_player_stats(self, player_data: Dict[str, Any], match_id: int, team_id: int) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        try:
            player_info = player_data.get('player', {})
            statistics = player_data.get('statistics', {})
            
            if not player_info or not statistics:
                return None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞—Ä–æ–≤
            total_shots = statistics.get('totalShots', 0)
            shots_on_target = statistics.get('onTargetScoringAttempt', 0)
            shots_off_target = statistics.get('offTargetShot', 0)
            blocked_shots = statistics.get('blockedScoringAttempt', 0)
            
            # –ï—Å–ª–∏ offTargetShot –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
            if shots_off_target == 0 and total_shots > 0:
                shots_off_target = total_shots - shots_on_target - blocked_shots
                if shots_off_target < 0:
                    shots_off_target = 0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            calculated_total = shots_on_target + shots_off_target + blocked_shots
            if total_shots != calculated_total and total_shots > 0:
                print(f"‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É–¥–∞—Ä–æ–≤ —É {player_info.get('name')}: API={total_shots}, calculated={calculated_total}")
                total_shots = max(total_shots, calculated_total)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if total_shots > 0:
                print(f"üéØ {player_info.get('name')}: {total_shots} —É–¥–∞—Ä–æ–≤ ({shots_on_target} –≤ —Å—Ç–≤–æ—Ä, {shots_off_target} –º–∏–º–æ, {blocked_shots} –±–ª–æ–∫)")
            
            return {
                'match_id': match_id,
                'team_id': team_id,
                'player_id': player_info.get('id'),
                'player_name': player_info.get('name'),
                'short_name': player_info.get('shortName'),
                'position': player_info.get('position'),
                'jersey_number': int(player_info.get('jerseyNumber', 0)) if player_info.get('jerseyNumber') else 0,
                'minutes_played': statistics.get('minutesPlayed', 0),
                'rating': float(statistics.get('rating', 0)),
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                'goals': statistics.get('goals', 0),
                'goal_assist': statistics.get('goalAssist', 0),
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞—Ä–æ–≤
                'total_shot': total_shots,
                'on_target_shot': shots_on_target,
                'off_target_shot': shots_off_target,
                'blocked_scoring_attempt': blocked_shots,
                
                # –ü–µ—Ä–µ–¥–∞—á–∏
                'total_pass': statistics.get('totalPass', 0),
                'accurate_pass': statistics.get('accuratePass', 0),
                'pass_accuracy': round((statistics.get('accuratePass', 0) / statistics.get('totalPass', 1) * 100), 2) if statistics.get('totalPass', 0) > 0 else 0,
                'key_pass': statistics.get('keyPass', 0),
                'total_long_balls': statistics.get('totalLongBalls', 0),
                'accurate_long_balls': statistics.get('accurateLongBalls', 0),
                
                # –î—Ä–∏–±–ª–∏–Ω–≥
                'successful_dribbles': statistics.get('successfulDribbles', 0),
                'dribble_success': round((statistics.get('successfulDribbles', 0) / (statistics.get('successfulDribbles', 0) + statistics.get('unsuccessfulDribbles', 1)) * 100), 2) if statistics.get('successfulDribbles', 0) > 0 else 0,
                
                # –û–±–æ—Ä–æ–Ω–∞
                'total_tackle': statistics.get('totalTackle', 0),
                'interception_won': statistics.get('interceptionWon', 0),
                'total_clearance': statistics.get('totalClearance', 0),
                'outfielder_block': statistics.get('outfielderBlock', 0),
                'challenge_lost': statistics.get('challengeLost', 0),
                
                # –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞
                'duel_won': statistics.get('duelWon', 0),
                'duel_lost': statistics.get('duelLost', 0),
                'aerial_won': statistics.get('aerialWon', 0),
                'duel_success': round((statistics.get('duelWon', 0) / (statistics.get('duelWon', 0) + statistics.get('duelLost', 1)) * 100), 2) if statistics.get('duelWon', 0) > 0 else 0,
                
                # –ü—Ä–æ—á–µ–µ
                'touches': statistics.get('touches', 0),
                'possession_lost_ctrl': statistics.get('possessionLostCtrl', 0),
                'was_fouled': statistics.get('wasFouled', 0),
                'fouls': statistics.get('fouls', 0),
                
                # –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ merge_cards_with_stats)
                'yellow_cards': statistics.get('yellowCards', 0),
                'red_cards': statistics.get('redCards', 0),
                
                # –í—Ä–∞—Ç–∞—Ä—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                'saves': statistics.get('saves', 0),
                'punches': statistics.get('punches', 0),
                'good_high_claim': statistics.get('goodHighClaim', 0),
                'saved_shots_from_inside_box': statistics.get('savedShotsFromInsideTheBox', 0),
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return None